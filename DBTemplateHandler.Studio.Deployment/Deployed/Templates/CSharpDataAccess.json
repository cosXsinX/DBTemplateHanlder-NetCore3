[
  {
    "TemplatedFilePath": "%databaseName%.DataAccess\\SqlServer\\DataAccessObjects\\%tableName%Dao.cs",
    "TemplatedFileContent": "{:TDB:PREPROCESSOR:MAPPING:DECLARE(([-\u003E(C#)\u003C-]\u003C=\u003E[[-\u003E(hierarchyid)\u003C-]=\u003E[-\u003E(Microsoft.SqlServer.Types.SqlHierarchyId)\u003C-],\r\n[-\u003E(smallint)\u003C-]=\u003E[-\u003E(short)\u003C-],\r\n[-\u003E(date)\u003C-]=\u003E[-\u003E(DateTime)\u003C-],\r\n[-\u003E(geography)\u003C-]=\u003E[-\u003E(Microsoft.SqlServer.Types.SqlGeography)\u003C-],\r\n[-\u003E(xml)\u003C-]=\u003E[-\u003E(System.Xml.XmlDocument)\u003C-],\r\n[-\u003E(varchar)\u003C-]=\u003E[-\u003E(string)\u003C-],\r\n[-\u003E(varbinary)\u003C-]=\u003E[-\u003E(byte[])\u003C-],\r\n[-\u003E(uniqueidentifier)\u003C-]=\u003E[-\u003E(Guid)\u003C-],\r\n[-\u003E(tinyint)\u003C-]=\u003E[-\u003E(byte)\u003C-],\r\n[-\u003E(timestamp)\u003C-]=\u003E[-\u003E(byte)\u003C-],\r\n[-\u003E(time)\u003C-]=\u003E[-\u003E(TimeSpan)\u003C-],\r\n[-\u003E(sql_variant)\u003C-]=\u003E[-\u003E(object)\u003C-],\r\n[-\u003E(smallmoney)\u003C-]=\u003E[-\u003E(decimal)\u003C-],\r\n[-\u003E(smalldatetime)\u003C-]=\u003E[-\u003E(DateTime)\u003C-],\r\n[-\u003E(rowversion)\u003C-]=\u003E[-\u003E(byte[])\u003C-],\r\n[-\u003E(nvarchar)\u003C-]=\u003E[-\u003E(string)\u003C-],\r\n[-\u003E(numeric)\u003C-]=\u003E[-\u003E(decimal)\u003C-],\r\n[-\u003E(ntext)\u003C-]=\u003E[-\u003E(string)\u003C-],\r\n[-\u003E(nchar)\u003C-]=\u003E[-\u003E(string)\u003C-],\r\n[-\u003E(money)\u003C-]=\u003E[-\u003E(decimal)\u003C-],\r\n[-\u003E(int)\u003C-]=\u003E[-\u003E(int)\u003C-],\r\n[-\u003E(image)\u003C-]=\u003E[-\u003E(byte[])\u003C-],\r\n[-\u003E(float)\u003C-]=\u003E[-\u003E(double)\u003C-],\r\n[-\u003E(varbinary)\u003C-]=\u003E[-\u003E(byte[])\u003C-],\r\n[-\u003E(decimal)\u003C-]=\u003E[-\u003E(decimal)\u003C-],\r\n[-\u003E(datetimeoffset)\u003C-]=\u003E[-\u003E(DateTimeOffset)\u003C-],\r\n[-\u003E(datetime)\u003C-]=\u003E[-\u003E(DateTime)\u003C-],\r\n[-\u003E(char)\u003C-]=\u003E[-\u003E(string)\u003C-],\r\n[-\u003E(bit)\u003C-]=\u003E[-\u003E(bool)\u003C-],\r\n[-\u003E(binary)\u003C-]=\u003E[-\u003E(byte[])\u003C-],\r\n[-\u003E(bigint)\u003C-]=\u003E[-\u003E(long)\u003C-]\r\n]):PREPROCESSOR:}\r\nusing System;\r\nusing System.Data.SqlClient;\r\nusing {:TDB:CURRENT:NAME::}.Models;\r\n\r\nnamespace {:TDB:CURRENT:NAME::}.SqlServer.DataAccessObjects\r\n{\r\n    public class {:TDB:TABLE:CURRENT:NAME::}Dao : AbstractDaoWithPrimaryKey\u003C{:TDB:TABLE:CURRENT:NAME::}Model,{:TDB:TABLE:CURRENT:NAME::}ModelPrimaryKey\u003E\r\n    {\r\n        public override string SelectQuery =\u003E @\u0022select \r\n{:TDB:TABLE:COLUMN:FOREACH[             {:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}{:TDB:TABLE:COLUMN:FOREACH:CURRENT:IS:NOT:LAST:COLUMN(,):::}\r\n]::} from {:TDB:TABLE:CURRENT:SCHEMA::}.{:TDB:TABLE:CURRENT:NAME::}\u0022;\r\n\r\n        protected override {:TDB:TABLE:CURRENT:NAME::}Model ToModel(SqlDataReader dataReader)\r\n        {\r\n            var result = new {:TDB:TABLE:CURRENT:NAME::}Model();\r\n{:TDB:TABLE:COLUMN:FOREACH[             result.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::} = ({:TDB:TABLE:COLUMN:FOREACH:CURRENT:CONVERT:TYPE(C#)::})(dataReader[\u0022{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u0022]{:TDB:TABLE:COLUMN:FOREACH:CURRENT:IS:NULL( is DBNull ? null : dataReader[\u0022{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u0022]):::});\r\n]::}            return result;\r\n        }\r\n        \r\n        public override string InsertQuery =\u003E @\u0022Insert Into {:TDB:TABLE:CURRENT:SCHEMA::}.{:TDB:TABLE:CURRENT:NAME::}\r\n(\r\n{:TDB:TABLE:COLUMN:NOT:AUTO:FOREACH[{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}{:TDB:TABLE:COLUMN:NOT:AUTO:FOREACH:CURRENT:IS:NOT:LAST:COLUMN(,):::}\r\n]::})\r\n{:TDB:TABLE:CURRENT:WHEN:HAS:AUTO(output \r\n{:TDB:TABLE:COLUMN:AUTO:FOREACH[inserted.{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}{:TDB:TABLE:COLUMN:AUTO:FOREACH:CURRENT:IS:NOT:LAST:COLUMN(,):::}\r\n]::})::}\r\nVALUES\r\n(\r\n{:TDB:TABLE:COLUMN:NOT:AUTO:FOREACH[@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}{:TDB:TABLE:COLUMN:NOT:AUTO:FOREACH:CURRENT:IS:NOT:LAST:COLUMN(,):::}\r\n]::})\u0022;\r\n\r\n        public override void InsertionGeneratedAutoIdMapping(object id, {:TDB:TABLE:CURRENT:NAME::}Model inserted)\r\n        {\r\n{:TDB:TABLE:COLUMN:AUTO:FOREACH[            inserted.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::} = ({:TDB:TABLE:COLUMN:FOREACH:CURRENT:CONVERT:TYPE(C#)::})id;\r\n]::}        }\r\n\r\n        public override void InsertionParameterMapping(SqlCommand sqlCommand, {:TDB:TABLE:CURRENT:NAME::}Model inserted)\r\n        {\r\n{:TDB:TABLE:COLUMN:NOT:AUTO:FOREACH[            sqlCommand.Parameters.AddWithValue(\u0022@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u0022, inserted.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::});\r\n]::}\r\n        }\r\n\r\n        public override string UpdateQuery =\u003E\r\n            @\u0022Update {:TDB:TABLE:CURRENT:SCHEMA::}.{:TDB:TABLE:CURRENT:NAME::}\r\nSet\r\n{:TDB:TABLE:COLUMN:NOT:PRIMARY:FOREACH[    {:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}=@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}{:TDB:TABLE:COLUMN:NOT:PRIMARY:FOREACH:CURRENT:IS:NOT:LAST:COLUMN(,):::}\r\n]::}\r\nWhere\r\n{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}=@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::} {:TDB:TABLE:COLUMN:PRIMARY:FOREACH:CURRENT:IS:NOT:LAST:COLUMN( AND ):::}\r\n]::}\u0022;\r\n\r\n        public override void UpdateParameterMapping(SqlCommand sqlCommand, {:TDB:TABLE:CURRENT:NAME::}Model updated)\r\n        {\r\n{:TDB:TABLE:COLUMN:NOT:PRIMARY:FOREACH[            sqlCommand.Parameters.AddWithValue(\u0022@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u0022, updated.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::});\r\n]::}        }\r\n\r\n        public override void UpdateWhereParameterMapping(SqlCommand sqlCommand, {:TDB:TABLE:CURRENT:NAME::}Model updated)\r\n        {\r\n{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[            sqlCommand.Parameters.AddWithValue(\u0022@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u0022, updated.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::});\r\n]::}        }\r\n\r\n        public override string DeleteQuery =\u003E\r\n@\u0022delete from\r\n    {:TDB:TABLE:CURRENT:SCHEMA::}.{:TDB:TABLE:CURRENT:NAME::}\r\nwhere\r\n{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}=@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::} {:TDB:TABLE:COLUMN:PRIMARY:FOREACH:CURRENT:IS:NOT:LAST:COLUMN( AND ):::}\r\n]::}\u0022;\r\n\r\n        public override void DeleteWhereParameterMapping(SqlCommand sqlCommand, {:TDB:TABLE:CURRENT:NAME::}Model deleted)\r\n        {\r\n{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[            sqlCommand.Parameters.AddWithValue(\u0022@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u0022, deleted.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::});\r\n]::}        }\r\n\r\n        public override string ByPrimaryWhereConditionWithArgs =\u003E \r\n@\u0022{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}=@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::} {:TDB:TABLE:COLUMN:PRIMARY:FOREACH:CURRENT:IS:NOT:LAST:COLUMN( AND ):::}\r\n]::}\u0022;\r\n\r\n        public override void MapPrimaryParameters({:TDB:TABLE:CURRENT:NAME::}ModelPrimaryKey key, SqlCommand sqlCommand)\r\n        {\r\n{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[            sqlCommand.Parameters.AddWithValue(\u0022@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u0022, key.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::});\r\n]::}\r\n        }\r\n\r\n    }\r\n}\r\n"
  },
  {
    "TemplatedFilePath": "%databaseName%.DataAccess\\SqlServer\\DataAccessObjects\\AbstractDao.cs",
    "TemplatedFileContent": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Data.SqlClient;\r\nusing System.Linq;\r\n\r\nnamespace {:TDB:CURRENT:NAME::}.SqlServer.DataAccessObjects\r\n{\r\n    public abstract class AbstractDao\u003CT\u003E\r\n    {\r\n        public List\u003CT\u003E GetAll(SqlConnection openedSqlConnection)\r\n        {\r\n            List\u003CT\u003E result = new List\u003CT\u003E();\r\n            using (SqlCommand command = new SqlCommand(SelectQuery, openedSqlConnection))\r\n            {\r\n                var dataReader = command.ExecuteReader();\r\n                while (dataReader.Read())\r\n                {\r\n                    var model = ToModel(dataReader);\r\n                    result.Add(model);\r\n                }\r\n                dataReader.Close();\r\n            }\r\n            return result;\r\n        }\r\n\r\n        public abstract string SelectQuery {get;}\r\n\r\n        protected abstract T ToModel(SqlDataReader dataReader);\r\n\r\n        public abstract string InsertQuery { get; }\r\n\r\n        public abstract void InsertionParameterMapping(SqlCommand sqlCommand, T inserted);\r\n\r\n        public abstract void InsertionGeneratedAutoIdMapping(object id, T inserted);\r\n\r\n        public SqlCommand ToInsertCommand(SqlConnection sqlConnection,T inserted)\r\n        {\r\n            SqlCommand cmd = new SqlCommand(InsertQuery, sqlConnection);\r\n            cmd.CommandType = CommandType.Text;\r\n            InsertionParameterMapping(cmd, inserted);\r\n            return cmd;\r\n        }\r\n\r\n        public void Insert(SqlConnection sqlConnection,T[] inserteds)\r\n        {\r\n            var insertionCommands = inserteds.Select(inserted =\u003E Tuple.Create(ToInsertCommand(sqlConnection, inserted),inserted));\r\n            var executedCommands = insertionCommands.Select(m =\u003E Tuple.Create(m.Item1.ExecuteScalar(),m.Item2,m.Item1)).ToList();\r\n            executedCommands.ForEach(m =\u003E InsertionGeneratedAutoIdMapping(m.Item1, m.Item2));\r\n            executedCommands.ForEach(m =\u003E m.Item3.DisposeAsync());\r\n        }\r\n\r\n        public abstract string UpdateQuery { get; }\r\n\r\n        public abstract void UpdateParameterMapping(SqlCommand sqlCommand, T updated);\r\n\r\n        public abstract void UpdateWhereParameterMapping(SqlCommand sqlCommand, T updated);\r\n\r\n        public SqlCommand ToUpdateCommand(SqlConnection sqlConnection, T updated)\r\n        {\r\n            var cmd = new SqlCommand(UpdateQuery, sqlConnection);\r\n            cmd.CommandType = CommandType.Text;\r\n            UpdateParameterMapping(cmd, updated);\r\n            UpdateWhereParameterMapping(cmd, updated);\r\n            return cmd;\r\n        }\r\n        public void Update(SqlConnection sqlConnection, T[] updateds)\r\n        {\r\n            var updateCommands = updateds.Select(updated =\u003E Tuple.Create(ToUpdateCommand(sqlConnection, updated),updated)).ToList();\r\n            var executedCommands = updateCommands.Select(m =\u003E Tuple.Create(m.Item2,m.Item1, m.Item1.ExecuteNonQuery())).ToList();\r\n            executedCommands.ForEach(m =\u003E m.Item2.DisposeAsync());\r\n        }\r\n\r\n        public abstract string DeleteQuery { get; }\r\n        public void Delete(SqlConnection sqlConnection, T[] deleteds)\r\n        {\r\n            var deleteComands = deleteds.Select(deleted =\u003E Tuple.Create(ToDeleteCommand(sqlConnection, deleted), deleted));\r\n            var executedCommands = deleteComands.Select(m =\u003E Tuple.Create(m.Item2, m.Item1, m.Item1.ExecuteNonQuery())).ToList();\r\n            executedCommands.ForEach(m =\u003E m.Item2.DisposeAsync());\r\n        }\r\n\r\n        public abstract void DeleteWhereParameterMapping(SqlCommand sqlCommand, T deleted);\r\n\r\n\r\n        public SqlCommand ToDeleteCommand(SqlConnection sqlConnection, T deleted)\r\n        {\r\n            var cmd = new SqlCommand(DeleteQuery, sqlConnection);\r\n            cmd.CommandType = CommandType.Text;\r\n            DeleteWhereParameterMapping(cmd, deleted);\r\n            return cmd;\r\n        }\r\n    }\r\n}\r\n"
  },
  {
    "TemplatedFilePath": "%databaseName%.DataAccess\\Models\\%tableName%Record.cs",
    "TemplatedFileContent": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace {:TDB:CURRENT:NAME::}.Models\r\n{\r\n    public struct {:TDB:TABLE:CURRENT:NAME::}ModelPrimaryKey\r\n    {\r\n{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[        public {:TDB:TABLE:COLUMN:FOREACH:CURRENT:CONVERT:TYPE(C#)::}{:TDB:TABLE:COLUMN:FOREACH:CURRENT:IS:NULL(?):::} {:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::} { get; set; }\r\n]::}\r\n    }\r\n\r\n    public class {:TDB:TABLE:CURRENT:NAME::}Model\r\n    {\r\n{:TDB:TABLE:COLUMN:FOREACH[        public {:TDB:TABLE:COLUMN:FOREACH:CURRENT:CONVERT:TYPE(C#)::}{:TDB:TABLE:COLUMN:FOREACH:CURRENT:IS:NULL(?):::} {:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::} { get; set; }\r\n]::}\r\n    }\r\n}\r\n"
  },
  {
    "TemplatedFilePath": "%databaseName%.DataAccess\\%databaseName%.DataAccess.csproj",
    "TemplatedFileContent": "\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\r\n\r\n  \u003CPropertyGroup\u003E\r\n    \u003CTargetFramework\u003Enetcoreapp3.0\u003C/TargetFramework\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\r\n  \u003CItemGroup\u003E\r\n    \u003CPackageReference Include=\u0022Microsoft.SqlServer.Types\u0022 Version=\u002214.0.1016.290\u0022 /\u003E\r\n    \u003CPackageReference Include=\u0022System.Data.SqlClient\u0022 Version=\u00224.8.0\u0022 /\u003E\r\n  \u003C/ItemGroup\u003E\r\n\r\n\u003C/Project\u003E"
  },
  {
    "TemplatedFilePath": "%databaseName%.DataAccess\\SqlServer\\DataAccessObjects\\AbstractDaoWithPrimaryKey.cs",
    "TemplatedFileContent": "using System.Collections.Generic;\r\nusing System.Data.SqlClient;\r\n\r\nnamespace {:TDB:CURRENT:NAME::}.SqlServer.DataAccessObjects\r\n{\r\n    public abstract class AbstractDaoWithPrimaryKey\u003CT, K\u003E : AbstractDao\u003CT\u003E where K : struct\r\n    {\r\n\r\n        public string SelectByPrimaryQuery =\u003E string.Concat(SelectQuery, \u0022 WHERE \u0022, ByPrimaryWhereConditionWithArgs);\r\n        public abstract string ByPrimaryWhereConditionWithArgs { get; }\r\n        public abstract void MapPrimaryParameters(K key,SqlCommand command);\r\n\r\n        private SqlCommand BuildSelectSqlCommandWithParameters(K key, SqlConnection openedSqlConnection)\r\n        {\r\n            var command = new SqlCommand(SelectByPrimaryQuery, openedSqlConnection);\r\n            MapPrimaryParameters(key,command);\r\n            return command;\r\n        }\r\n\r\n        public List\u003CT\u003E GetByPrimaryKey(SqlConnection openedSqlConnection, K Key)\r\n        {\r\n            List\u003CT\u003E result = new List\u003CT\u003E();\r\n            using (SqlCommand command = BuildSelectSqlCommandWithParameters(Key,openedSqlConnection))\r\n            {\r\n                var dataReader = command.ExecuteReader();\r\n                while (dataReader.Read())\r\n                {\r\n                    var model = ToModel(dataReader);\r\n                    result.Add(model);\r\n                }\r\n                dataReader.Close();\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n}\r\n"
  },
  {
    "TemplatedFilePath": "%databaseName%.DataAccess.IntegrationTests\\%databaseName%.DataAccess.IntegrationTests.csproj",
    "TemplatedFileContent": "\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\r\n\r\n  \u003CPropertyGroup\u003E\r\n    \u003CTargetFramework\u003Enetcoreapp3.0\u003C/TargetFramework\u003E\r\n\r\n    \u003CIsPackable\u003Efalse\u003C/IsPackable\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\r\n  \u003CItemGroup\u003E\r\n    \u003CPackageReference Include=\u0022nunit\u0022 Version=\u00223.12.0\u0022 /\u003E\r\n    \u003CPackageReference Include=\u0022NUnit3TestAdapter\u0022 Version=\u00223.16.1\u0022\u003E\r\n      \u003CPrivateAssets\u003Eall\u003C/PrivateAssets\u003E\r\n      \u003CIncludeAssets\u003Eruntime; build; native; contentfiles; analyzers; buildtransitive\u003C/IncludeAssets\u003E\r\n    \u003C/PackageReference\u003E\r\n    \u003CPackageReference Include=\u0022Microsoft.NET.Test.Sdk\u0022 Version=\u002216.2.0\u0022 /\u003E\r\n  \u003C/ItemGroup\u003E\r\n\r\n  \u003CItemGroup\u003E\r\n    \u003CProjectReference Include=\u0022..\\AdventureWorks2017.DataAccess\\AdventureWorks2017.DataAccess.csproj\u0022 /\u003E\r\n  \u003C/ItemGroup\u003E\r\n\r\n\u003C/Project\u003E\r\n"
  },
  {
    "TemplatedFilePath": "%databaseName%.DataAccess\\%databaseName%.DataAccess.sln",
    "TemplatedFileContent": "\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 16\r\nVisualStudioVersion = 16.0.29503.13\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\u0022{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\u0022) = \u0022{:TDB:CURRENT:NAME::}.DataAccess\u0022, \u0022{:TDB:CURRENT:NAME::}.DataAccess.csproj\u0022, \u0022{B30962D0-BAF6-4180-87AE-44EB5446107B}\u0022\r\nEndProject\r\nProject(\u0022{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\u0022) = \u0022{:TDB:CURRENT:NAME::}.DataAccess.IntegrationTests\u0022, \u0022..\\{:TDB:CURRENT:NAME::}.DataAccess.IntegrationTests\\{:TDB:CURRENT:NAME::}.DataAccess.IntegrationTests.csproj\u0022, \u0022{2FA1C5AE-DF87-4E8B-947E-C51B9AC12BFB}\u0022\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{B30962D0-BAF6-4180-87AE-44EB5446107B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{B30962D0-BAF6-4180-87AE-44EB5446107B}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{B30962D0-BAF6-4180-87AE-44EB5446107B}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{B30962D0-BAF6-4180-87AE-44EB5446107B}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{2FA1C5AE-DF87-4E8B-947E-C51B9AC12BFB}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{2FA1C5AE-DF87-4E8B-947E-C51B9AC12BFB}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{2FA1C5AE-DF87-4E8B-947E-C51B9AC12BFB}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{2FA1C5AE-DF87-4E8B-947E-C51B9AC12BFB}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {C74F7F80-75FB-4CF3-883B-095DB339DB9E}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
  },
  {
    "TemplatedFilePath": "%databaseName%.DataAccess.IntegrationTests\\SqlServer\\DataAccessObjects\\TestHelper.cs",
    "TemplatedFileContent": "using Microsoft.SqlServer.Types;\r\n\r\nnamespace {:TDB:CURRENT:NAME::}.DataAccess.IntegrationTests.SqlServer.DataAccessObjects\r\n{\r\n    public class TestHelper\r\n    {\r\n        public static SqlGeography BuildRandomGeographyPoint()\r\n        {\r\n            var result = SqlGeography.Point(TestSession.Random.Next(0, 180) - 90, TestSession.Random.Next(0, 360) - 180, 4326);\r\n            return result;\r\n        }\r\n    }\r\n}\r\n"
  },
  {
    "TemplatedFilePath": "%databaseName%.DataAccess.IntegrationTests\\SqlServer\\DataAccessObjects\\TestSession.cs",
    "TemplatedFileContent": "using Microsoft.SqlServer.Types;\r\nusing NUnit.Framework;\r\nusing System;\r\nusing System.Data.SqlClient;\r\nusing System.Linq;\r\n\r\nnamespace {:TDB:CURRENT:NAME::}.DataAccess.IntegrationTests\r\n{\r\n\r\n    [SetUpFixture]\r\n    public class TestSession : IDisposable\r\n    {\r\n        public string ConnectionString = \u0022{:TDB:FUNCTION:REPLACE({:TDB:CURRENT:CONNECTION:STRING::}\u003C-:WITH:[\\]:BY:[\\\\])::}\u0022;\r\n\r\n\r\n        public static SqlConnection SqlConnection { get; private set; }\r\n        public static SessionRandom Random { get; private set; }\r\n\r\n        [OneTimeSetUp]\r\n        public void OneTimeSetUp()\r\n        {\r\n            Random = new SessionRandom();\r\n\r\n            SqlConnection = new SqlConnection(ConnectionString);\r\n            SqlConnection.Open();\r\n        }\r\n\r\n\r\n        [OneTimeTearDown]\r\n        public void OneTimeTearDown()\r\n        {\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            if (SqlConnection != null \u0026\u0026 SqlConnection.State != System.Data.ConnectionState.Closed) SqlConnection.Close();\r\n        }\r\n\r\n        public class SessionRandom : Random\r\n        {\r\n            public short RandomShort()\r\n            {\r\n                return Convert.ToInt16(Next(short.MinValue \u002B1,short.MaxValue - 1));\r\n            }\r\n        \r\n            public string RandomString(int length)\r\n            {\r\n                if(length \u003C= 0)\r\n                {\r\n                    length = 10; //When length is not defined =\u003E silent management =\u003E bad !!!\r\n                }\r\n                const string chars = \u0022ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\u0022;\r\n                return new string(Enumerable.Repeat(chars, length).Select(s =\u003E s[Next(s.Length)]).ToArray());\r\n            }\r\n\r\n            public byte[] RandomBytes()\r\n            {\r\n                byte[] generated = new byte[10];\r\n                NextBytes(generated);\r\n                return generated;\r\n            }\r\n\r\n            public byte RandomByte()\r\n            {\r\n                byte[] generated = new byte[1];\r\n                NextBytes(generated);\r\n                return generated[0];\r\n            }\r\n\r\n            private int NextInt32()\r\n            {\r\n                unchecked\r\n                {\r\n                    int firstBits = Next(0, 1 \u003C\u003C 4) \u003C\u003C 28;\r\n                    int lastBits = Next(0, 1 \u003C\u003C 28);\r\n                    return firstBits | lastBits;\r\n                }\r\n            }\r\n\r\n\r\n            public decimal RandomDecimal()\r\n            {\r\n                byte scale = (byte)Next(29);\r\n                bool sign = Next(2) == 1;\r\n                return new decimal(NextInt32(),\r\n                                   NextInt32(),\r\n                                   NextInt32(),\r\n                                   sign,\r\n                                   scale);\r\n            }\r\n\r\n            public DateTime RandomDateTime()\r\n            {\r\n                var generated = DateTime.Today\r\n                    .AddDays(Next(20))\r\n                    .AddDays(-Next(20))\r\n                    .AddHours(Next(20))\r\n                    .AddSeconds(Next(10000000));\r\n                return generated;\r\n            }\r\n\r\n            public SqlGeography RandomSqlGeography()\r\n            {\r\n                return SqlGeography.Point(Random.Next(10), Random.Next(10), 4326);\r\n            }\r\n\r\n            public TimeSpan RandomTimeSpan()\r\n            {\r\n                return new TimeSpan(0, 0, 0, TestSession.Random.Next(86400));\r\n            }\r\n\r\n            public DateTimeOffset RandomDateTimeOffset()\r\n            {\r\n                return DateTimeOffset.Now.AddDays(Next(200));\r\n            }\r\n            \r\n        }\r\n    }\r\n}\r\n"
  },
  {
    "TemplatedFilePath": "%databaseName%.DataAccess.IntegrationTests\\SqlServer\\DataAccessObjects\\%tableName%DaoIntegrationTest.cs",
    "TemplatedFileContent": "{:TDB:PREPROCESSOR:MAPPING:DECLARE(([-\u003E(C#_TEST_VALUESOURCE)\u003C-]\u003C=\u003E[[-\u003E(hierarchyid)\u003C-]=\u003E[-\u003E(Microsoft.SqlServer.Types.SqlHierarchyId.Null; //TODO define how to generate random hierarchy id in test session)\u003C-],\r\n[-\u003E(smallint)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomShort())\u003C-],\r\n[-\u003E(date)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomDateTime())\u003C-],\r\n[-\u003E(geography)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomSqlGeography())\u003C-],\r\n[-\u003E(xml)\u003C-]=\u003E[-\u003E(null; //TODO define how to generate random xml)\u003C-],\r\n[-\u003E(varchar)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomString({:TDB:TABLE:COLUMN:FOREACH:CURRENT:MAX:SIZE::}))\u003C-],\r\n[-\u003E(varbinary)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomBytes())\u003C-],\r\n[-\u003E(uniqueidentifier)\u003C-]=\u003E[-\u003E(Guid.NewGuid())\u003C-],\r\n[-\u003E(tinyint)\u003C-]=\u003E[-\u003E(Convert.ToByte(TestSession.Random.RandomString({:TDB:TABLE:COLUMN:FOREACH:CURRENT:MAX:SIZE::})))\u003C-],\r\n[-\u003E(timestamp)\u003C-]=\u003E[-\u003E(Convert.ToByte(TestSession.Random.RandomDateTime()))\u003C-],\r\n[-\u003E(time)\u003C-]=\u003E[-\u003E(new TimeSpan(0, 0, 0,TestSession.Random.Next(86400)))\u003C-],\r\n[-\u003E(sql_variant)\u003C-]=\u003E[-\u003E((object)TestSession.Random.Next())\u003C-],\r\n[-\u003E(smallmoney)\u003C-]=\u003E[-\u003E(Convert.ToDecimal(TestSession.Random.Next()))\u003C-],\r\n[-\u003E(smalldatetime)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomDateTime())\u003C-],\r\n[-\u003E(rowversion)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomBytes())\u003C-],\r\n[-\u003E(nvarchar)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomString({:TDB:TABLE:COLUMN:FOREACH:CURRENT:MAX:SIZE::}))\u003C-],\r\n[-\u003E(numeric)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomDecimal())\u003C-],\r\n[-\u003E(ntext)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomString({:TDB:TABLE:COLUMN:FOREACH:CURRENT:MAX:SIZE::}))\u003C-],\r\n[-\u003E(nchar)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomString({:TDB:TABLE:COLUMN:FOREACH:CURRENT:MAX:SIZE::}))\u003C-],\r\n[-\u003E(money)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomDecimal())\u003C-],\r\n[-\u003E(int)\u003C-]=\u003E[-\u003E(TestSession.Random.Next())\u003C-],\r\n[-\u003E(image)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomBytes())\u003C-],\r\n[-\u003E(float)\u003C-]=\u003E[-\u003E(TestSession.Random.NextDouble())\u003C-],\r\n[-\u003E(varbinary)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomBytes())\u003C-],\r\n[-\u003E(decimal)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomDecimal())\u003C-],\r\n[-\u003E(datetimeoffset)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomDateTimeOffset())\u003C-],\r\n[-\u003E(datetime)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomDateTime())\u003C-],\r\n[-\u003E(char)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomString({:TDB:TABLE:COLUMN:FOREACH:CURRENT:MAX:SIZE::}))\u003C-],\r\n[-\u003E(bit)\u003C-]=\u003E[-\u003E(Convert.ToBoolean(TestSession.Random.Next(1)))\u003C-],\r\n[-\u003E(binary)\u003C-]=\u003E[-\u003E(TestSession.Random.RandomBytes())\u003C-],\r\n[-\u003E(bigint)\u003C-]=\u003E[-\u003E((long)TestSession.Random.Next())\u003C-]\r\n]):PREPROCESSOR:}\r\nusing {:TDB:CURRENT:NAME::}.DataAccess.IntegrationTests.SqlServer.DataAccessObjects;\r\nusing {:TDB:CURRENT:NAME::}.Models;\r\nusing {:TDB:CURRENT:NAME::}.SqlServer.DataAccessObjects;\r\nusing NUnit.Framework;\r\nusing System;\r\nusing System.Data.SqlClient;\r\nusing System.Linq;\r\nusing AdventureWorks2017.DataAccess.IntegrationTests.SqlServer.DataAccessObjects;\r\n\r\nnamespace {:TDB:CURRENT:NAME::}.DataAccess.IntegrationTests\r\n{\r\n    [TestFixture]\r\n    public class {:TDB:TABLE:CURRENT:NAME::}DaoIntegrationTests\r\n    {\r\n        private {:TDB:TABLE:CURRENT:NAME::}Dao _tested;\r\n        public SqlConnection _connection;\r\n\r\n        [OneTimeSetUp]\r\n        public void Setup()\r\n        {\r\n            _tested = new {:TDB:TABLE:CURRENT:NAME::}Dao();\r\n            _connection = TestSession.SqlConnection;\r\n        }\r\n\r\n        //TODO execute when there is no indexes\r\n        [Test]\r\n        public void GetAllIntegrationTest()\r\n        {\r\n            var selecteds = _tested.GetAll(_connection);\r\n            Assert.IsNotNull(selecteds);\r\n        }\r\n\r\n        [Test]\r\n        public void IntegrationTest()\r\n        {\r\n            #region good insertion and select by id test\r\n            {:TDB:TABLE:CURRENT:NAME::}Model inserted = new {:TDB:TABLE:CURRENT:NAME::}Model();\r\n{:TDB:TABLE:COLUMN:NOT:AUTO:FOREACH[            inserted.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::} = {:TDB:TABLE:COLUMN:FOREACH:CURRENT:CONVERT:TYPE(C#_TEST_VALUESOURCE)::};\r\n]::}\r\n            _tested.Insert(_connection,new[] { inserted });\r\n\r\n            var selectedAfterInsertion = _tested.GetByPrimaryKey(_connection, new {:TDB:TABLE:CURRENT:NAME::}ModelPrimaryKey()\r\n            {\r\n{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[                {:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::} = inserted.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::},\r\n]::}            });\r\n\r\n            CollectionAssert.IsNotEmpty(selectedAfterInsertion);\r\n            var selectedAfterInsert = selectedAfterInsertion.Single();\r\n{:TDB:TABLE:COLUMN:FOREACH[            Assert.AreEqual(inserted.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::},selectedAfterInsert.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::});\r\n]::}\r\n            #endregion\r\n\r\n            #region update and select by id test\r\n{:TDB:TABLE:COLUMN:NOT:PRIMARY:FOREACH[            inserted.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::} = {:TDB:TABLE:COLUMN:FOREACH:CURRENT:CONVERT:TYPE(C#_TEST_VALUESOURCE)::};\r\n]::}\r\n            _tested.Update(_connection, new[] { inserted });\r\n\r\n            var selectedAfterUpdateAddresss = _tested.GetByPrimaryKey(_connection, new {:TDB:TABLE:CURRENT:NAME::}ModelPrimaryKey()\r\n            {\r\n{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[                {:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::} = inserted.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::},\r\n]::}            });\r\n\r\n            CollectionAssert.IsNotEmpty(selectedAfterUpdateAddresss);\r\n            var selectedAfterUpdate = selectedAfterUpdateAddresss.Single();\r\n{:TDB:TABLE:COLUMN:FOREACH[            Assert.AreEqual(inserted.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::}, selectedAfterUpdate.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::});\r\n]::}\r\n            #endregion\r\n\r\n            #region delete test\r\n            _tested.Delete(_connection, new[] { inserted });\r\n            var selectedAfterDeleteAddresss = _tested.GetByPrimaryKey(_connection, new {:TDB:TABLE:CURRENT:NAME::}ModelPrimaryKey()\r\n            {\r\n{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[                {:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::} = inserted.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::},\r\n]::}            });\r\n            CollectionAssert.IsEmpty(selectedAfterDeleteAddresss);\r\n            #endregion\r\n        }\r\n    }\r\n}"
  }
]