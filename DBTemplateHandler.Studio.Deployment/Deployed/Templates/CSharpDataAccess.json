[
  {
    "TemplatedFilePath": "%databaseName%\\SqlServer\\DataAccessObjects\\%tableName%Dao.cs",
    "TemplatedFileContent": "using System;\r\nusing System.Data.SqlClient;\r\nusing {:TDB:CURRENT:NAME::}.Models;\r\n\r\nnamespace {:TDB:CURRENT:NAME::}.SqlServer.DataAccessObjects\r\n{\r\n    public class {:TDB:TABLE:CURRENT:NAME::}Dao : AbstractDao\u003C{:TDB:TABLE:CURRENT:NAME::}Model\u003E\r\n    {\r\n        public override string SelectQuery =\u003E @\u0022select \r\n{:TDB:TABLE:COLUMN:FOREACH[             {:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}{:TDB:TABLE:COLUMN:FOREACH:CURRENT:IS:NOT:LAST:COLUMN(,):::}\r\n]::} from {:TDB:TABLE:CURRENT:NAME::}\u0022;\r\n\r\n        protected override {:TDB:TABLE:CURRENT:NAME::}Model ToModel(SqlDataReader dataReader)\r\n        {\r\n            var result = new {:TDB:TABLE:CURRENT:NAME::}Model();\r\n{:TDB:TABLE:COLUMN:FOREACH[             result.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::} = ({:TDB:TABLE:COLUMN:FOREACH:CURRENT:CONVERT:TYPE(C#)::})(dataReader[\u0022{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u0022]{:TDB:TABLE:COLUMN:FOREACH:CURRENT:IS:NULL( is DBNull ? null : dataReader[\u0022{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u0022]):::});\r\n]::}            return result;\r\n        }\r\n        \r\n        public override string InsertQuery =\u003E @\u0022Insert Into {:TDB:TABLE:CURRENT:NAME::}\r\n(\r\n{:TDB:TABLE:COLUMN:NOT:AUTO:FOREACH[{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}{:TDB:TABLE:COLUMN:NOT:AUTO:FOREACH:CURRENT:IS:NOT:LAST:COLUMN(,):::}\r\n]::})\r\noutput \r\n{:TDB:TABLE:COLUMN:AUTO:FOREACH[{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}{:TDB:TABLE:COLUMN:AUTO:FOREACH:CURRENT:IS:NOT:LAST:COLUMN(,):::}\r\n]::}\r\nVALUES\r\n(\r\n{:TDB:TABLE:COLUMN:NOT:AUTO:FOREACH[@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}{:TDB:TABLE:COLUMN:NOT:AUTO:FOREACH:CURRENT:IS:NOT:LAST:COLUMN(,):::}\r\n]::})\u0022;\r\n\r\n        public override void InsertionGeneratedAutoIdMapping(object id, {:TDB:TABLE:CURRENT:NAME::}Model inserted)\r\n        {\r\n{:TDB:TABLE:COLUMN:AUTO:FOREACH[            inserted.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::} = ({:TDB:TABLE:COLUMN:FOREACH:CURRENT:CONVERT:TYPE(C#)::})id;\r\n]::}        }\r\n\r\n        public override void InsertionParameterMapping(SqlCommand sqlCommand, {:TDB:TABLE:CURRENT:NAME::}Model inserted)\r\n        {\r\n{:TDB:TABLE:COLUMN:NOT:AUTO:FOREACH[            sqlCommand.Parameters.AddWithValue(\u0022@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u0022, inserted.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::});\r\n]::}\r\n        }\r\n\r\n        public override string UpdateQuery =\u003E\r\n            @\u0022Update {:TDB:TABLE:CURRENT:NAME::}\r\nSet\r\n{:TDB:TABLE:COLUMN:NOT:PRIMARY:FOREACH[    {:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}=@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}{:TDB:TABLE:COLUMN:NOT:PRIMARY:FOREACH:CURRENT:IS:NOT:LAST:COLUMN(,):::}\r\n]::}\r\nWhere\r\n{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}=@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::} {:TDB:TABLE:COLUMN:PRIMARY:FOREACH:CURRENT:IS:NOT:LAST:COLUMN( AND ):::}\r\n]::}\u0022;\r\n\r\n        public override void UpdateParameterMapping(SqlCommand sqlCommand, {:TDB:TABLE:CURRENT:NAME::}Model updated)\r\n        {\r\n{:TDB:TABLE:COLUMN:NOT:PRIMARY:FOREACH[            sqlCommand.Parameters.AddWithValue(\u0022@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u0022, updated.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::});\r\n]::}        }\r\n\r\n        public override void UpdateWhereParameterMapping(SqlCommand sqlCommand, {:TDB:TABLE:CURRENT:NAME::}Model updated)\r\n        {\r\n{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[            sqlCommand.Parameters.AddWithValue(\u0022@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u0022, updated.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::});\r\n]::}        }\r\n\r\n        public override string DeleteQuery =\u003E\r\n@\u0022delete from\r\n    {:TDB:TABLE:CURRENT:NAME::}\r\nwhere\r\n{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}=@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::} {:TDB:TABLE:COLUMN:PRIMARY:FOREACH:CURRENT:IS:NOT:LAST:COLUMN( AND ):::}\r\n]::}\u0022;\r\n\r\n        public override void DeleteWhereParameterMapping(SqlCommand sqlCommand, {:TDB:TABLE:CURRENT:NAME::}Model deleted)\r\n        {\r\n{:TDB:TABLE:COLUMN:PRIMARY:FOREACH[            sqlCommand.Parameters.AddWithValue(\u0022@{:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u0022, deleted.{:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::});\r\n]::}        }\r\n    }\r\n}\r\n"
  },
  {
    "TemplatedFilePath": "%databaseName%\\SqlServer\\DataAccessObjects\\AbstractDao.cs",
    "TemplatedFileContent": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Data;\r\nusing System.Data.SqlClient;\r\nusing System.Linq;\r\n\r\nnamespace {:TDB:CURRENT:NAME::}.SqlServer.DataAccessObjects\r\n{\r\n    public abstract class AbstractDao\u003CT\u003E\r\n    {\r\n        public List\u003CT\u003E GetAll(SqlConnection openedSqlConnection)\r\n        {\r\n            List\u003CT\u003E result = new List\u003CT\u003E();\r\n            using (SqlCommand command = new SqlCommand(SelectQuery, openedSqlConnection))\r\n            {\r\n                var dataReader = command.ExecuteReader();\r\n                while (dataReader.Read())\r\n                {\r\n                    var model = ToModel(dataReader);\r\n                    result.Add(model);\r\n                }\r\n                dataReader.Close();\r\n            }\r\n            return result;\r\n        }\r\n\r\n        public abstract string SelectQuery {get;}\r\n\r\n        protected abstract T ToModel(SqlDataReader dataReader);\r\n\r\n        public abstract string InsertQuery { get; }\r\n\r\n        public abstract void InsertionParameterMapping(SqlCommand sqlCommand, T inserted);\r\n\r\n        public abstract void InsertionGeneratedAutoIdMapping(object id, T inserted);\r\n\r\n        public SqlCommand ToInsertCommand(SqlConnection sqlConnection,T inserted)\r\n        {\r\n            SqlCommand cmd = new SqlCommand(InsertQuery, sqlConnection);\r\n            cmd.CommandType = CommandType.Text;\r\n            InsertionParameterMapping(cmd, inserted);\r\n            return cmd;\r\n        }\r\n\r\n        public void Insert(SqlConnection sqlConnection,T[] inserteds)\r\n        {\r\n            var insertionCommands = inserteds.Select(inserted =\u003E Tuple.Create(ToInsertCommand(sqlConnection, inserted),inserted));\r\n            var executedCommands = insertionCommands.Select(m =\u003E Tuple.Create(m.Item1.ExecuteScalar(),m.Item2,m.Item1)).ToList();\r\n            executedCommands.ForEach(m =\u003E InsertionGeneratedAutoIdMapping(m.Item1, m.Item2));\r\n            executedCommands.ForEach(m =\u003E m.Item3.DisposeAsync());\r\n        }\r\n\r\n        public abstract string UpdateQuery { get; }\r\n\r\n        public abstract void UpdateParameterMapping(SqlCommand sqlCommand, T updated);\r\n\r\n        public abstract void UpdateWhereParameterMapping(SqlCommand sqlCommand, T updated);\r\n\r\n        public SqlCommand ToUpdateCommand(SqlConnection sqlConnection, T updated)\r\n        {\r\n            var cmd = new SqlCommand(UpdateQuery, sqlConnection);\r\n            cmd.CommandType = CommandType.Text;\r\n            UpdateParameterMapping(cmd, updated);\r\n            UpdateWhereParameterMapping(cmd, updated);\r\n            return cmd;\r\n        }\r\n        public void Update(SqlConnection sqlConnection, T[] updateds)\r\n        {\r\n            var updateCommands = updateds.Select(updated =\u003E Tuple.Create(ToUpdateCommand(sqlConnection, updated),updated)).ToList();\r\n            var executedCommands = updateCommands.Select(m =\u003E Tuple.Create(m.Item2,m.Item1, m.Item1.ExecuteNonQuery())).ToList();\r\n            executedCommands.ForEach(m =\u003E m.Item2.DisposeAsync());\r\n        }\r\n\r\n        public abstract string DeleteQuery { get; }\r\n        public void Delete(SqlConnection sqlConnection, T[] deleteds)\r\n        {\r\n            var deleteComands = deleteds.Select(deleted =\u003E Tuple.Create(ToDeleteCommand(sqlConnection, deleted), deleted));\r\n            var executedCommands = deleteComands.Select(m =\u003E Tuple.Create(m.Item2, m.Item1, m.Item1.ExecuteNonQuery())).ToList();\r\n            executedCommands.ForEach(m =\u003E m.Item2.DisposeAsync());\r\n        }\r\n\r\n        public abstract void DeleteWhereParameterMapping(SqlCommand sqlCommand, T deleted);\r\n\r\n\r\n        public SqlCommand ToDeleteCommand(SqlConnection sqlConnection, T deleted)\r\n        {\r\n            var cmd = new SqlCommand(DeleteQuery, sqlConnection);\r\n            cmd.CommandType = CommandType.Text;\r\n            DeleteWhereParameterMapping(cmd, deleted);\r\n            return cmd;\r\n        }\r\n    }\r\n}\r\n"
  },
  {
    "TemplatedFilePath": "%databaseName%\\Models\\%tableName%Record.cs",
    "TemplatedFileContent": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace {:TDB:CURRENT:NAME::}.Models\r\n{\r\n    public class {:TDB:TABLE:CURRENT:NAME::}Model\r\n    {\r\n{:TDB:TABLE:COLUMN:FOREACH[        public {:TDB:TABLE:COLUMN:FOREACH:CURRENT:CONVERT:TYPE(C#)::}{:TDB:TABLE:COLUMN:FOREACH:CURRENT:IS:NULL(?):::} {:TDB:FUNCTION:REPLACE({:TDB:TABLE:COLUMN:FOREACH:CURRENT:NAME::}\u003C-:WITH:[ ]:BY:[])::} { get; set; }\r\n]::}\r\n    }\r\n}\r\n"
  },
  {
    "TemplatedFilePath": "%databaseName%\\%databaseName%.DataAccess.csproj",
    "TemplatedFileContent": "\u003CProject Sdk=\u0022Microsoft.NET.Sdk\u0022\u003E\r\n\r\n  \u003CPropertyGroup\u003E\r\n    \u003CTargetFramework\u003Enetcoreapp3.0\u003C/TargetFramework\u003E\r\n  \u003C/PropertyGroup\u003E\r\n\r\n  \u003CItemGroup\u003E\r\n    \u003CPackageReference Include=\u0022Microsoft.SqlServer.Types\u0022 Version=\u002214.0.1016.290\u0022 /\u003E\r\n    \u003CPackageReference Include=\u0022System.Data.SqlClient\u0022 Version=\u00224.8.0\u0022 /\u003E\r\n  \u003C/ItemGroup\u003E\r\n\r\n\u003C/Project\u003E"
  }
]