using DBTemplateHandler.Core.Database;
using DBTemplateHandler.Core.TemplateHandlers.Context.Tables;
using DBTemplateHandler.Core.TemplateHandlers.Handlers;
using NUnit.Framework;
using System;
using System.Collections.Generic;

namespace DBTemplateHandler.Core.UnitTests.TemplateHandlers.Context.Table
{
    [TestFixture]
    public class WhenHasIndexColumnTableContextHandlerUnitTests
    {
        private WhenHasIndexColumnTableContextHandler _tested;

        [OneTimeSetUp]
        public void OneTimeSetUp()
        {
            var templateHandler = TemplateHandlerBuilder.Build(null);
            _tested = new WhenHasIndexColumnTableContextHandler(templateHandler);
        }

        [Test]
        public void ShouldThrowAnExceptionWhenStringContextIsNull()
        {
            Assert.Throws<Exception>(() => _tested.processContext(null));
        }


        [Test]
        public void ShouldThrowANExceptionWhenColumnModelIsNull()
        {
            Assert.Throws<Exception>(() =>
            {
                _tested.TableModel = null;
                _tested.processContext("Hello World !");
            });
        }

        [Test]
        public void ShouldNotReturnContextContentWhenTheTableHasNotIndexedColumn()
        {
            _tested.TableModel = new TableModel(){ Columns = new List<IColumnModel>() { new ColumnModel() { IsIndexed = false, } } };
            var contextContent = "Hello World !";
            var result = _tested.processContext($"{_tested.StartContext}{contextContent}{_tested.EndContext}");
            Assert.AreEqual(String.Empty, result);
        }

        [Test]
        public void ShouldReturnContextContentWhenTheTableHasIndexedColumn()
        {
            _tested.TableModel = new TableModel()
            {
                Columns = new List<IColumnModel>(){ new ColumnModel(){IsIndexed = true,} }
            };
            var contextContent = "Hello World !";
            var result = _tested.processContext($"{_tested.StartContext}{contextContent}{_tested.EndContext}");
            Assert.AreEqual(contextContent, result);
        }


        public class TableModel : ITableModel
        {
            public IList<IColumnModel> Columns { get; set; }
            public string Name { get; set; }
            public IDatabaseModel ParentDatabase { get; set; }
            public string Schema { get; set ; }
            public IList<IForeignKeyConstraintModel> ForeignKeyConstraints { get; set; }
        }

        public class ColumnModel : IColumnModel
        {
            public bool IsAutoGeneratedValue { get; set; }
            public bool IsNotNull { get; set; }
            public bool IsPrimaryKey { get; set; }
            public string Name { get; set; }
            public string Type { get; set; }
            public ITableModel ParentTable { get; set; }
            public int ValueMaxSize { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
            public bool IsIndexed { get; set; }
        }
    }
}
