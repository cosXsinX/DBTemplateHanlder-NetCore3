using DBTemplateHandler.Core.Database;
using DBTemplateHandler.Core.TemplateHandlers.Context.Columns;
using DBTemplateHandler.Core.TemplateHandlers.Handlers;
using DBTemplateHandler.Core.UnitTests.ModelImplementation;
using NUnit.Framework;
using System;
using System.Collections.Generic;

namespace DBTemplateHandler.Core.UnitTests.TemplateHandlers.Context.Columns
{
    [TestFixture]
    public class ColumnIndexColumnContextHandlerUnitTests
    {
        private ColumnIndexColumnContextHandler _tested;

        [OneTimeSetUp]
        public void OneTimeSetUp()
        {
            var templateHandlerNew = TemplateHandlerBuilder.Build(null);
            _tested = new ColumnIndexColumnContextHandler(templateHandlerNew);
        }

        [Test]
        public void DefaultIndexShouldBeMinus1Value()
        {
            Assert.AreEqual(0, _tested.DefaultIndex);
        }

        [Test]
        public void ShouldThrowAnExceptionWhenStringContextIsNull()
        {
            Assert.Throws<Exception>(() => _tested.ProcessContext(null, new ProcessorDatabaseContext() 
            { 
                Column = new ColumnModelForTest() { } 
            }));
        }

        [Test]
        public void ShouldThrowAnArgumentNullExceptionWhenDatabaseContextIsNull()
        {
            Assert.Throws<ArgumentNullException>(() => _tested.ProcessContext("Hello world", null));
        }

        [Test]
        public void ShouldThrowANExceptionWhenColumnModelIsNull()
        {
            Assert.Throws<ArgumentException>(() =>
            {
                var databaseContext = new ProcessorDatabaseContext() { Column = null };
                _tested.ProcessContext("Hello World !", databaseContext);
            });
        }

        [Test]
        public void ShouldThrowAnExceptionWhenThereIsContentBetweenStartAndEndContext()
        {
            Assert.Throws<Exception>(() =>
            {
                var databaseContext = new ProcessorDatabaseContext() { Column = new ColumnModelForTest() { } };
                _tested.ProcessContext($"{_tested.StartContext}I Should not be here{_tested.EndContext}",databaseContext);
            });
        }

        [Test]
        public void ShouldReturnDefaultIndexWhenParentTableColumnReferenceIsNull()
        {
            var columnModel = new ColumnModelForTest()
            {
                IsAutoGeneratedValue = true
            };

            TableModelForTest tableModel = new TableModelForTest
            {
                Columns = null
            };
            var databaseContext = new ProcessorDatabaseContext() { Column = columnModel, Table = tableModel };
            var processedContext = _tested.ProcessContext($"{_tested.StartContext}{_tested.EndContext}",databaseContext);
            Assert.AreEqual($"{_tested.DefaultIndex}", processedContext);
        }

        [Test]
        public void ProcessedContextShouldBe2ValueIndexWhenThereIsTwoColumnBefore()
        {
            var columnModel = new ColumnModel()
            {
                IsAutoGeneratedValue = true
            };

            TableModel tableModel = new TableModel
            {
                Columns = new List<IColumnModel>()
                {
                    new ColumnModel(),
                    new ColumnModel(),
                    columnModel,
                    new ColumnModel(),
                }
            };
            columnModel.ParentTable = tableModel;
            var databaseContext = new ProcessorDatabaseContext() { Column = columnModel, Table = tableModel };
            var processedContext = _tested.ProcessContext($"{_tested.StartContext}{_tested.EndContext}", databaseContext);
            Assert.AreEqual($"{2}", processedContext);
        }


        [Test]
        public void ProcessedContextShouldBeDefaultAutoIndexWhenParentTableIsNull()
        {
            var columnModel = new ColumnModel()
            {
                IsAutoGeneratedValue = true
            };
            columnModel.ParentTable = null;
            var databaseContext = new ProcessorDatabaseContext() { Column = columnModel, Table = null };
            var processedContext = _tested.ProcessContext($"{_tested.StartContext}{_tested.EndContext}", databaseContext);
            Assert.AreEqual($"{_tested.DefaultIndex}", processedContext);
        }

        [Test]
        public void ProcessedContextShouldBeDefaultAutoIndexWhenColumnIsNotInTheParentTable()
        {
            var columnModel = new ColumnModel()
            {
                IsAutoGeneratedValue = true
            };

            TableModel tableModel = new TableModel
            {
                Columns = new List<IColumnModel>()
                {
                    new ColumnModel
                    {
                        IsAutoGeneratedValue = true,
                    },
                    new ColumnModel
                    {
                        IsAutoGeneratedValue = false,
                    },
                    new ColumnModel
                    {
                        IsAutoGeneratedValue = true,
                    }
                }
            };
            columnModel.ParentTable = tableModel;
            var databaseContext = new ProcessorDatabaseContext() { Column = columnModel, Table = tableModel };
            var processedContext = _tested.ProcessContext($"{_tested.StartContext}{_tested.EndContext}",databaseContext);
            Assert.AreEqual($"{_tested.DefaultIndex}", processedContext);
        }
    }
}
