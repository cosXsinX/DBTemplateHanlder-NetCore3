@page "/editor"

@using DBTemplateHandler.Core.Database
@using DBTemplateHandler.Core.Template
@using DBTemplateHandler.Studio.Data
@inject DBTemplateService dbTemplateService

<h1>Template editor</h1>
<div class="container">
    <div class="row">
        @if (databaseModelPersistenceNames != null)
        {
            <select class="form-control" @onchange="@SetCurrentDatabaseModel">
                <option value="">-- Select Database model --</option>
                @foreach (var databaseModelPersistenceName in databaseModelPersistenceNames)
                {
                    <option value="@databaseModelPersistenceName">@databaseModelPersistenceName</option>
                }
            </select>
        }
    </div>
    <div class="row form-group p-2">
        <div class="col-2 text-primary"><h5>Group</h5></div>
        <div class="col-2 btn-group">
            <button class="btn btn-primary" @onclick="@CreateNewGroup">New</button>
            <button class="btn btn-secondary" @onclick="@SaveTemplateGroup">Save</button>
        </div>
        <div class="col-4 input-group">
            <div class="input-group-prepend">
                <span class="input-group-text">Group name</span>
            </div>
            <input type="text" class="form-control" @bind="@(currentTemplateModelPersistenceName)" />
        </div>
        <div class="col-4 input-group">
            <div class="input-group-prepend">
                <span class="input-group-text">Choose group</span>
            </div>
            @if (templateModelPersistenceNames != null)
            {
                <select class="form-control" @onchange="@SetCurrentTemplateModels">
                    <option value="">-- Select Template model --</option>
                    @foreach (var templatePersistenceName in templateModelPersistenceNames)
                    {
                        <option value="@templatePersistenceName">@templatePersistenceName</option>
                    }
                </select>
            }
        </div>
    </div>
    <div class="container row form-group">
        <div class="col-10">
            <div class="row">
                <h6>Templated file path</h6>
            </div>
            <input class="row form-control" type="text" @bind="@(CurrentTemplateFilePath)" />
            <div class="row">
                <h6>Templated file content</h6>
            </div>
            <textarea class="row form-control" @bind="@(CurrentTemplateFileContent)" rows="20"></textarea>
        </div>
        <div class="col-2">
            <div class="row">
                <div class="col-2 btn-group">
                    <button class="btn oi oi-plus btn-sm btn-primary" @onclick="AddTemplateToGroup"/>
                    <button class="btn oi oi-trash btn-sm btn-danger" @onclick="DeleteFromGroup"/>
                </div>
            </div>
            <div class="row">
                <select class="form-control" multiple @onchange="@(SetCurrentTemplateModel)" size="30">
                    @for (int i = 0; i < currentTemplateModels.Count; i++)
                    {
                        var templateModel = currentTemplateModels[i];
                        <option value="@i">@templateModel.TemplatedFilePath</option>
                    }
                </select>
            </div>
        </div>
    </div>
</div>
@*
    <div class="container-fluid">
        @foreach (var currentResult in result)
        {
            <div class="container-fluid">
                <div class="row">
                    <div class="w-25">
                        File path
                    </div>
                    <div class="w-75">
                        @currentResult.Path
                    </div>
                </div>
                <div class="row">
                    Content :
                </div>
                <div class="row">
                    @currentResult.Content
                </div>
            </div>
        }
    </div>*@

@code {

    public string CurrentTemplateFilePath 
    {
        get { return currentTemplateModel?.TemplatedFilePath; }
        set
        {
            if (currentTemplateModel == null) return;
            currentTemplateModel.TemplatedFilePath = value;
        }
    }

    public string CurrentTemplateFileContent
    {
        get { return currentTemplateModel?.TemplatedFileContent; }
        set
        {
            if (currentTemplateModel == null) return;
            currentTemplateModel.TemplatedFileContent = value;
        }
    }

    string currentDatabaseModelPersistenceName;
    IDatabaseModel currentDatabaseModel;
    async void SetCurrentDatabaseModel(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        currentDatabaseModel = await dbTemplateService.GetDatabaseModelByPersistenceName(value);
        currentDatabaseModelPersistenceName = value;
    }

    string currentTemplateModelPersistenceName;
    IList<ITemplateModel> currentTemplateModels = new List<ITemplateModel>();
    async void SetCurrentTemplateModels(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        currentTemplateModels = await dbTemplateService.GetTemplateModelByPersistenceName(value);
        currentTemplateModel = null;
        currentTemplateModelPersistenceName = value;
    }

    void SetCurrentTemplateModel(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        int.TryParse(value, out var index);
        if (index == -1) return;
        currentTemplateModel = currentTemplateModels[index];
    }

    //ITemplateModel templateModel = new TemplateModel();

    //IList<ITemplateModel> templateModels = new List<ITemplateModel>();
    IList<string> databaseModelPersistenceNames = new List<string>();
    IList<string> templateModelPersistenceNames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        databaseModelPersistenceNames = await dbTemplateService.GetDatabaseModelPeristenceNames();
        templateModelPersistenceNames = await dbTemplateService.GetAllTemplateModelPersistenceNames();
    }

    //List<IHandledTemplateResultModel> result = new List<IHandledTemplateResultModel>();
    //void Process()
    //{
    //    result.Clear();
    //    var resultIntermediate = dbTemplateService.Process(templateModels.FirstOrDefault(), databaseModels.FirstOrDefault());
    //    if (!resultIntermediate.Any()) return;
    //    result.AddRange(resultIntermediate);
    //}

    ITemplateModel currentTemplateModel = null;
    void SetTemplate(ITemplateModel setTemplateModel)
    {
        currentTemplateModel = setTemplateModel;
    }

    void CreateNewGroup()
    {
        currentTemplateModels = new List<ITemplateModel>();
        currentTemplateModelPersistenceName = "Template model group name here";
    }


    async Task SaveTemplateGroup()
    {
        dbTemplateService.SaveTemplateModels(currentTemplateModelPersistenceName, currentTemplateModels);
        templateModelPersistenceNames = await dbTemplateService.GetAllTemplateModelPersistenceNames();
    }

    void AddTemplateToGroup()
    {
        if (currentTemplateModels == null) CreateNewGroup();
        currentTemplateModel = new TemplateModel();
        currentTemplateModels.Add(currentTemplateModel);
    }

    void DeleteFromGroup()
    {
        var deletedTemplateModel = currentTemplateModel;
        currentTemplateModel = null;
        if (currentTemplateModels == null) return;
        currentTemplateModels.Remove(deletedTemplateModel);
    }
}
