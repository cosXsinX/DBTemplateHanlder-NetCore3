@page "/editor"

@using DBTemplateHandler.Core.Database
@using DBTemplateHandler.Core.Template
@using DBTemplateHandler.Studio.Data
@inject DBTemplateService dbTemplateService
@inject IJSRuntime JSRuntime

<div class="container">
    <div class="container-fluid rounded border border-primary">
        <h1>Template editor</h1>
        <div class="row form-group border border-secondary m-1 p-1">
            <div class="col-2 btn-group">
                <button class="btn btn-primary" @onclick="@CreateNewGroup"><span class="oi oi-plus" /></button>
                <button class="btn btn-secondary" @onclick="@SaveTemplateGroup">Save</button>
                <button class="btn btn-danger" @onclick="@DeleteTemplateGroup"><span class="oi oi-trash"></span></button>
            </div>
            <div class="col-5 input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Group name</span>
                </div>
                <input type="text" class="form-control" @bind="@(currentTemplateModelPersistenceName)" />
            </div>
            <div class="col-5 input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Choose group</span>
                </div>
                @if (templateModelPersistenceNames != null)
                {
                    <select class="form-control" @onchange="@SetCurrentTemplateModels">
                        <option value="">-- Select Template model --</option>
                        @foreach (var templatePersistenceName in templateModelPersistenceNames)
                        {
                            <option value="@templatePersistenceName">@templatePersistenceName</option>
                        }
                    </select>
                }
            </div>
        </div>
        <div class="row form-group m-1">
            <div class="col-10">
                <div class="row">
                    <h6>Templated file path</h6>
                </div>
                <input class="row form-control autocomplete-template-file-path" type="text" @bind="@(CurrentTemplateFilePath)"
                       placeholder="@TemplateFilePathPlaceHolder" />
                <div class="row">
                    <h6>Templated file content</h6>
                </div>
                <div id="editor" class="row" style="height:500px"></div>

                @*<textarea  class="row form-control autocomplete-template-file-content" @bind="@(CurrentTemplateFileContent)" rows="20"></textarea>*@
            </div>
            <div class="col-2">
                <div class="row">
                    <div class="col-2 btn-group">
                        <button class="btn oi oi-plus btn-sm btn-primary" @onclick="AddTemplateToGroup" />
                        <button class="btn oi oi-trash btn-sm btn-danger" @onclick="DeleteFromGroup" />
                    </div>
                </div>
                <div class="row">
                    <select class="form-control" multiple @onchange="@(SetCurrentTemplateModel)" size="30">
                        @for (int i = 0; i < currentTemplateModels.Count; i++)
                        {
                            var templateModel = currentTemplateModels[i];
                            <option value="@i">@templateModel.TemplatedFilePath</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid rounded border border-secondary">
        <div class="row mr-1">
            <div class="col-3 text text-primary align-content-start">File(s) generation</div>
            <div class="col-5 input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Choose database</span>
                </div>
                @if (databaseModelPersistenceNames != null)
                {
                    <select class="form-control" @onchange="@SetCurrentDatabaseModel">
                        <option value="">-- Select Database model --</option>
                        @foreach (var databaseModelPersistenceName in databaseModelPersistenceNames)
                        {
                            <option value="@databaseModelPersistenceName">@databaseModelPersistenceName</option>
                        }
                    </select>
                }
            </div>
            <div class="btn-group offset-2 col-2">
                <button class="btn btn-primary" @onclick="@RunGeneration"><span class="io io-media-play"></span>Run</button>
            </div>
        </div>
        @if (results != null)
        {
            <div class="row mr-1 border border-success rounded">
                @foreach (var currentResult in results)
                {
                    <div class="container-fluid mr-1 border border-secondary rounded">
                        <div class="row mr-1">
                            <div class="col-2 text text-info">File path</div>
                            <div class="col-10 border border-info text text-info rounded">
                                @currentResult.Path
                            </div>
                        </div>
                        <div class="row mr-1">
                            Content
                        </div>
                        <div class="row mr-1 border border-info rounded">
                            @currentResult.Content
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {

    public string CurrentTemplateFilePath
    {
        get { return currentTemplateModel?.TemplatedFilePath; }
        set
        {
            if (currentTemplateModel == null) return;
            currentTemplateModel.TemplatedFilePath = value;
            SetEditorContent(value, CurrentTemplateFileContent);
        }
    }

    public string CurrentTemplateFileContent
    {
        get
        {
            return CurrentTemplateModel.TemplatedFileContent;
        }
        set
        {
            if (CurrentTemplateModel == null) return;
            CurrentTemplateModel.TemplatedFileContent = value;
            SetEditorContent(CurrentTemplateFilePath, value);
        }
    }

    string currentDatabaseModelPersistenceName;
    IDatabaseModel currentDatabaseModel;
    IList<IHandledTemplateResultModel> results = null;
    async void SetCurrentDatabaseModel(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        currentDatabaseModel = await dbTemplateService.GetDatabaseModelByPersistenceName(value);
        currentDatabaseModelPersistenceName = value;
    }

    string currentTemplateModelPersistenceName;
    IList<ITemplateModel> currentTemplateModels = new List<ITemplateModel>();
    async void SetCurrentTemplateModels(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        currentTemplateModels = await dbTemplateService.GetTemplateModelByPersistenceName(value);
        CurrentTemplateModel = null;
        currentTemplateModelPersistenceName = value;
    }

    async void SetCurrentTemplateModel(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        int.TryParse(value, out var index);
        if (index == -1) return;
        CurrentTemplateModel = currentTemplateModels[index];
    }

    //ITemplateModel templateModel = new TemplateModel();

    //IList<ITemplateModel> templateModels = new List<ITemplateModel>();
    IList<string> databaseModelPersistenceNames = new List<string>();
    IList<string> templateModelPersistenceNames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        databaseModelPersistenceNames = await dbTemplateService.GetDatabaseModelPeristenceNames();
        templateModelPersistenceNames = await dbTemplateService.GetAllTemplateModelPersistenceNames();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("onBlazorReady");
            JSRuntime.InvokeVoidAsync("onBlazorReadyInitializeEditor");
        }
    }

    //List<IHandledTemplateResultModel> result = new List<IHandledTemplateResultModel>();
    //void Process()
    //{
    //    result.Clear();
    //    var resultIntermediate = dbTemplateService.Process(templateModels.FirstOrDefault(), databaseModels.FirstOrDefault());
    //    if (!resultIntermediate.Any()) return;
    //    result.AddRange(resultIntermediate);
    //}

    ITemplateModel currentTemplateModel = null;
    public  ITemplateModel CurrentTemplateModel {
        get
        {
            return currentTemplateModel;
        }
        set {
            currentTemplateModel = value;
            if (currentTemplateModel != null) SetEditorContent(value?.TemplatedFilePath??string.Empty , value?.TemplatedFileContent??string.Empty);
        }
    }

    async void SetTemplate(ITemplateModel setTemplateModel)
    {
        CurrentTemplateModel = setTemplateModel;
        StateHasChanged();
    }

    async void CreateNewGroup()
    {
        currentTemplateModels = new List<ITemplateModel>();
        currentTemplateModelPersistenceName = "Template model group name here";
        //StateHasChanged();
    }


    async Task SaveTemplateGroup()
    {
        CurrentTemplateFileContent = await GetEditorContent();
        dbTemplateService.SaveTemplateModels(currentTemplateModelPersistenceName, currentTemplateModels);
        templateModelPersistenceNames = await dbTemplateService.GetAllTemplateModelPersistenceNames();
        //StateHasChanged();
    }

    async Task DeleteTemplateGroup()
    {
        dbTemplateService.DeleteTemplateModels(currentTemplateModelPersistenceName);
        currentTemplateModelPersistenceName = null;
        currentTemplateModels = null;
        CurrentTemplateModel = null;
        templateModelPersistenceNames = await dbTemplateService.GetAllTemplateModelPersistenceNames();
        //StateHasChanged();
    }

    async void AddTemplateToGroup()
    {
        if (currentTemplateModels == null) CreateNewGroup();
        CurrentTemplateModel = new TemplateModel();
        currentTemplateModels.Add(currentTemplateModel);
        //StateHasChanged();
    }

    async void DeleteFromGroup()
    {
        var deletedTemplateModel = currentTemplateModel;
        CurrentTemplateModel = null;
        if (currentTemplateModels == null) return;
        currentTemplateModels.Remove(deletedTemplateModel);
        //StateHasChanged();
    }

    async void RunGeneration()
    {
        if (CurrentTemplateModel == null) return;
        if (currentDatabaseModel == null) return;
        CurrentTemplateFileContent = await GetEditorContent();
        results = dbTemplateService.Process(CurrentTemplateModel, currentDatabaseModel);
        StateHasChanged();
    }

    public string ColumnTemplateFileNameWord
    {
        get => dbTemplateService?.ColumnTemplateFileNameWord ?? string.Empty;
    }

    public string TableFilePathTemplateWord
    {
        get => dbTemplateService?.TableFilePathTemplateWord ?? string.Empty;
    }

    public string DatabaseFilePathTemplateWord
    {
        get => dbTemplateService?.DatabaseFilePathTemplateWord ?? string.Empty;
    }

    public IList<string> AllFilePathTemplateWords
    {
        get => dbTemplateService?.AllFilePathTemplateWords ?? new List<string>();
    }

    public string TemplateFilePathPlaceHolder
    {
        get => $"Exemple: {DatabaseFilePathTemplateWord}-FolderName{System.IO.Path.DirectorySeparatorChar}{TableFilePathTemplateWord}-{ColumnTemplateFileNameWord}-dataAccessObject.cs";
    }

    async void SetEditorContent(string filePath, string content)
    {
        var aceMode = FileExtensionToAceModeConverter.ToAceMode(filePath);
        JSRuntime.InvokeVoidAsync("setEditorContent", new object[] { aceMode, content });
    }

    async Task<string> GetEditorContent()
    {
        var result = await JSRuntime.InvokeAsync<string>("getEditorContent", new object[] { });
        CurrentTemplateFileContent = result;
        return CurrentTemplateFileContent;
    }
}
