@page "/editor"

@using DBTemplateHandler.Core.Database
@using DBTemplateHandler.Studio.Data
@inject DBTemplateService dbTemplateService

<h1>Template editor</h1>
<div class="container">
    <div class="row">
        @if (databaseModelPersistenceNames != null)
        {
            <select class="form-control" @onchange="@SetCurrentDatabaseModel">
                <option value="">-- Select Database model --</option>
                @foreach (var databaseModelPersistenceName in databaseModelPersistenceNames)
                {
                    <option value="@databaseModelPersistenceName">@databaseModelPersistenceName</option>
                }
            </select>
        }
        </div>
</div>
@*<div class="row">
    <div class="w-25">Template File Path :</div>
    <div class="w-75"><input type="text" @bind="@(templateModel.TemplatedFilePath)" /></div>
</div>
<div class="md-form row">
    <textarea id="form7" class="md-textarea form-control w-75" rows="10" @bind="@(templateModel.TemplatedFileContent)"></textarea>
    <ul class="w-25 list-group" rows="10" cols="2">
        @foreach (var currentTemplateModel in templateModels)
        {
            <li class="list-group-item" @onclick="@(() => SetTemplate(currentTemplateModel))">@currentTemplateModel.TemplatedFilePath</li>
        }
    </ul>
</div>

<button class="btn btn-primary" @onclick="@Process">Process</button>

<div class="container-fluid">
    @foreach (var currentResult in result)
    {
        <div class="container-fluid">
            <div class="row">
                <div class="w-25">
                    File path
                </div>
                <div class="w-75">
                    @currentResult.Path
                </div>
            </div>
            <div class="row">
                Content :
            </div>
            <div class="row">
                @currentResult.Content
            </div>
        </div>
    }
</div>*@

@code {

    string currentDatabaseModelPersistenceName;
    IDatabaseModel currentDatabaseModel;
    async void SetCurrentDatabaseModel(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        currentDatabaseModel = await dbTemplateService.GetDatabaseModelByPersistenceName(value);
        currentDatabaseModelPersistenceName = value;
    }

    //ITemplateModel templateModel = new TemplateModel();

    //IList<ITemplateModel> templateModels = new List<ITemplateModel>();
    IList<string> databaseModelPersistenceNames = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        //templateModels = await dbTemplateService.GetTemplateModels();
        databaseModelPersistenceNames = await dbTemplateService.GetDatabaseModelPeristenceNames();
    }

    //List<IHandledTemplateResultModel> result = new List<IHandledTemplateResultModel>();
    //void Process()
    //{
    //    result.Clear();
    //    var resultIntermediate = dbTemplateService.Process(templateModels.FirstOrDefault(), databaseModels.FirstOrDefault());
    //    if (!resultIntermediate.Any()) return;
    //    result.AddRange(resultIntermediate);
    //}

    //void SetTemplate(ITemplateModel setTemplateModel)
    //{
    //    templateModel = setTemplateModel;
    //}
}
