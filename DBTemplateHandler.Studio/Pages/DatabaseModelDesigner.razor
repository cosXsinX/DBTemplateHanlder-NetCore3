@page "/database-model-designer"
@using DBTemplateHandler.Core.Database
@using DBTemplateHandler.Studio.Data
@inject DBTemplateService dbTemplateService

<h1>Database Model Designer</h1>

<div class="container">
    <div class="row">
        <h3>Databases</h3>
    </div>
    <div class="row">
        <div class="col-2">
            <button class="btn btn-primary" @onclick="CreateDatabaseModel">Add New</button>
        </div>
        <div class="col-2">
            <button class="btn btn-primary" @onclick="SaveCurrentDatabase">Save</button>
        </div>
        <div class="col-2">
            @if (databaseModelPersistenceNames != null)
            {
                <select class="form-control" @onchange="@SetCurrentDatabaseModel">
                    <option value="">-- Select Database model --</option>
                    @foreach (var databaseModelPersistenceName in databaseModelPersistenceNames)
                    {
                        <option value="@databaseModelPersistenceName">@databaseModelPersistenceName</option>
                    }
                </select>
            }
        </div>
        @if (currentDatabaseModel != null)
        {
            <div class="col-2">
                <label for="@currentDatabaseModelPersistenceName">Database Model Name</label>
            </div>
            <div class="col-4">
                <input type="text" @bind="@currentDatabaseModelPersistenceName" />
            </div>
        }
    </div>
</div>
<div class="container">
    <div class="row">
        <div class="col-4">
            <div class="row">
                <h3>Tables</h3>
            </div>
            <div class="row">
                <div class="col-12">
                    <button class="btn btn-primary" @onclick="@CreateTableModel">Add New</button>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    @if (currentTableModel != null)
                    {
                        <div class="row">
                            <div class="col-5">
                                <label for="@(currentTableModel.Name)">Name</label>
                            </div>
                            <div class="col-7">
                                <input type="text" @bind="@(currentTableModel.Name)" />
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    @if (currentDatabaseModel != null)
                    {
                        <ul class="list-group" rows="10">
                            @foreach (var tableModel in currentDatabaseModel.Tables)
                            {
                                <li class="list-group-item" @onclick="@(() => SetCurrentTable(tableModel))">@tableModel.Name</li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
        <div class="col-4">
            <div class="row">
                <h3>Columns</h3>
            </div>
            <div class="row">
                <div class="col-12">
                    <button class="btn btn-primary" @onclick="@CreateColumnModel">Add New</button>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    @if (currentColumModel != null)
                    {
                        <div class="row">
                            <div class="col-5">
                                <label for="@(currentColumModel.Name)">Name</label>
                            </div>
                            <div class="col-7">
                                <input type="text" @bind="@(currentColumModel.Name)" />
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    @if (currentTableModel != null && currentTableModel.Columns != null)
                    {
                        <ul class="list-group" rows="10">
                            @foreach (var column in currentTableModel.Columns)
                            {
                                <li class="list-group-item" @onclick="@(() => SetCurrentColumn(column))">@column.Name</li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
        <div class="col-4">
            <div class="row">
                <h3>Current column</h3>
            </div>
            @if (currentColumModel != null)
            {
                <div class="row">
                    <label for="@(currentColumModel.Name)">Name</label>
                    <input type="text" @bind="@(currentColumModel.Name)" />
                </div>
                <div class="row">
                    <label for="@(currentColumModel.IsAutoGeneratedValue)">Is Auto</label>
                    <input type="checkbox" @bind="@(currentColumModel.IsAutoGeneratedValue)" />
                </div>
                <div class="row">
                    <label for="@(currentColumModel.IsNotNull)">Is Not Null</label>
                    <input type="checkbox" @bind="@(currentColumModel.IsNotNull)" />
                </div>
                <div class="row">
                    <label for="@(currentColumModel.IsPrimaryKey)">Is Primary Key</label>
                    <input type="checkbox" @bind="@(currentColumModel.IsPrimaryKey)" />
                </div>
                <div class="row">
                    <label for="@(currentColumModel.Type)">Type</label>
                    <input type="text" @bind="@(currentColumModel.Type)" />
                </div>
            }
        </div>
    </div>
</div>


@code {
    async void SetCurrentDatabaseModel(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        currentDatabaseModel = await dbTemplateService.GetDatabaseModelByPersistenceName(value);
        currentDatabaseModelPersistenceName = value;
    }

    int currentCount = 0;

    IList<string> databaseModelPersistenceNames;
    IList<IDatabaseModel> databaseModels;
    string currentDatabaseModelPersistenceName;
    IDatabaseModel currentDatabaseModel;
    ITableModel currentTableModel;
    IColumnModel currentColumModel;

    protected override async Task OnInitializedAsync()
    {
        databaseModelPersistenceNames = await dbTemplateService.GetDatabaseModelPeristenceNames();
        databaseModels = new List<IDatabaseModel>();
    }


    void IncrementCount()
    {
        currentCount++;
    }

    void CreateDatabaseModel()
    {
        var createdDatabaseModel = new DatabaseModel() { Tables = new List<ITableModel>() };
        currentDatabaseModel = createdDatabaseModel;
        currentDatabaseModel.Tables = new List<ITableModel>();
        databaseModels.Add(createdDatabaseModel);
    }

    void SetCurrentTable(ITableModel tableModel)
    {
        currentTableModel = tableModel;
    }

    void SetCurrentColumn(IColumnModel columnModel)
    {
        currentColumModel = columnModel;
    }

    void SaveCurrentDatabase()
    {
        dbTemplateService.SaveDatabaseModel(currentDatabaseModelPersistenceName, currentDatabaseModel);
    }




    void CreateTableModel()
    {
        currentTableModel = new TableModel();
        currentTableModel.Name = "Table name here";
        if (currentDatabaseModel.Tables == null) currentDatabaseModel.Tables = new List<ITableModel>();
        currentDatabaseModel.Tables.Add(currentTableModel);
    }

    void CreateColumnModel()
    {
        currentColumModel = new ColumnModel();
        currentColumModel.Name = "Column name here";
        if (currentTableModel == null) CreateTableModel();
        if (currentTableModel.Columns == null) currentTableModel.Columns = new List<IColumnModel>();
        currentTableModel.Columns.Add(currentColumModel);
    }
}
