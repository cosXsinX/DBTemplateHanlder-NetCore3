@page "/database-model-designer"
@using DBTemplateHandler.Core.Database
@using DBTemplateHandler.Studio.Data
@using DBTemplateHandler.Persistance.Serializable
@inject DBTemplateService dbTemplateService


    <div class="container">
        <h1>Database Designer</h1>
        <div class="row form-group">
            <div class="col-2 text-primary">
                <h5>Databases</h5>
            </div>
            <div class="col-2 btn-group">
                <button class="btn btn-primary" @onclick="@CreateDatabaseModel"><span class="oi oi-plus" /></button>
                <button class="btn btn-secondary" @onclick="@SaveCurrentDatabase">Save</button>
                <button class="btn btn-danger" @onclick="@DeleteCurrentDatabase"><span class="oi oi-trash"></span></button>
            </div>
            <div class="col-4 input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Name</span>
                </div>
                <input type="text" class="form-control" @bind="@currentDatabaseModelPersistenceName" />
            </div>
            <div class="col-4 input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Choose</span>
                </div>
                @if (databaseModelPersistenceNames != null)
                {
                    <select class="form-control" @onchange="@SetCurrentDatabaseModel">
                        <option value="">-- Select Database model --</option>
                        @foreach (var databaseModelPersistenceName in databaseModelPersistenceNames)
                        {
                            <option value="@databaseModelPersistenceName">@databaseModelPersistenceName</option>
                        }
                    </select>
                }
            </div>
        </div>
        <div class="row form-group">
            <div class="col-2 text-primary">
                <h5>Type set</h5>
            </div>
            <div class="col-4 input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Choose</span>
                </div>
                @if (TypeSetNames != null)
                {
                    <select class="form-control" @bind="CurrentDatatabaseTypeSet">
                        <option value="">-- Select Database model --</option>
                        @foreach (var typeSetName in TypeSetNames)
                        {
                            <option value="@typeSetName">@typeSetName</option>
                        }
                    </select>
                }
            </div>
        </div>
        <div class="row form-group">
            <div class="col-2 text-primary">
                <h5>Source</h5>
            </div>
            <div class="col-10 input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Connection string</span>
                </div>
                <input type="text" class="form-control" @bind="@CurrentDatabaseConnectionString" />
            </div>
        </div>
        <div class="row form-group">
            <div class="col-4">
                <div class="row">
                    <h3>Tables</h3>
                </div>
                <div class="row">
                    <div class="col-12">
                        <button class="btn btn-primary @DisabledTableInputAttribute" @onclick="@CreateTableModel">Add New</button>
                        <button class="btn btn-danger @DisabledDeleteTableButtonAttribute" @onclick="@DeleteTableModel">Delete</button>
                    </div>
                </div>
                <div class="row">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Name</span>
                        </div>
                        <input type="text" class="form-control @DisabledTableInputAttribute" @bind="@CurrentTableModelName" />
                    </div>
                </div>
                <div class="row">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Schema</span>
                        </div>
                        <input type="text" class="form-control @DisabledTableInputAttribute" @bind="@CurrentTableModelSchema" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        @if (currentDatabaseModel != null)
                        {
                            <ul class="list-group" rows="10">
                                @foreach (var tableModel in currentDatabaseModel.Tables.OrderBy(tableModel => $"{tableModel.Schema}-{tableModel.Name}"))
                                {
                                    <li class="list-group-item @ActiveAttributeWhenTableIsCurrentTableModel(tableModel)" @onclick="@(() => SetCurrentTable(tableModel))">@tableModel.Schema - @tableModel.Name</li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
            <div class="col-4">
                <div class="row">
                    <h3>Columns</h3>
                </div>
                <div class="row">
                    <div class="col-12">
                        <button class="btn btn-primary @DisabledAddColumnButtonAttribute" @onclick="@CreateColumnModel">Add New</button>
                        <button class="btn btn-danger @DisabledDeleteColumnButtonAttribute" @onclick="@DeleteCurrentColumnModel">Delete</button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">Name</span>
                            </div>
                            <input type="text" class="form-control" @bind="@CurrentColumnName" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        @if (currentTableModel != null && currentTableModel.Columns != null)
                        {
                            <ul class="list-group" rows="10">
                                @foreach (var column in currentTableModel.Columns)
                                {
                                    <li class="list-group-item @ActiveAttributeWhenTableIsCurrentColumnModel(column)" @onclick="@(() => SetCurrentColumn(column))">@column.Name</li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
            <div class="col-4">
                <div class="row">
                    <h3>Current column</h3>
                </div>

                <div class="row input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Value type</span>
                    </div>
                    @if (ColumnDataTypes != null)
                    {
                        <select class="form-control @DisabledAddColumnButtonAttribute" @bind="@CurrentColumnModelType">
                            <option value="">-- Select Type --</option>
                            @foreach (var currentType in ColumnDataTypes)
                            {
                                <option value="@currentType">@currentType</option>
                            }
                        </select>
                    }
                </div>
                <div class="row">
                    <div class="col-12 input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Is Auto</span>
                        </div>
                        <div class="input-group-append">
                            <div class="btn-group btn-group-toggle @DisabledAddColumnButtonAttribute" data-toggle="buttons">
                                <label class="btn @BtnClassIsAutoGeneratedAttribute @ActiveWhenIsAutoGeneratedAttribute">
                                    <input type="radio" autocomplete="off" name="isautogenerated" value="@true" checked="@IsAutoGenerated" @onclick="@ToggleIsAutoGenerated" />Yes
                                </label>
                                <label class="btn @BtnClassIsAutoGeneratedAttribute @ActiveWhenIsNotAutoGeneratedAttribute">
                                    <input type="radio" autocomplete="off" name="isautogenerated" value="@false" checked="@(!IsAutoGenerated)" @onclick="@ToggleIsAutoGenerated" />No
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Is Not Null</span>
                        </div>
                        <div class="input-group-append">
                            <div class="btn-group btn-group-toggle @DisabledAddColumnButtonAttribute" data-toggle="buttons">
                                <label class="btn @BtnClassIsNotNullAttribute @ActiveWhenIsNotNullAttribute">
                                    <input type="radio" autocomplete="off" name="isautogenerated" value="@true" checked="@IsNotNull" @onclick="@ToggleIsNotNullGenerated" />Yes
                                </label>
                                <label class="btn @BtnClassIsNotNullAttribute @ActiveWhenIsNullAttribute">
                                    <input type="radio" autocomplete="off" name="isautogenerated" value="@false" checked="@(!IsNotNull)" @onclick="@ToggleIsNotNullGenerated" />No
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12 input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Is Primary Key</span>
                        </div>
                        <div class="input-group-append">
                            <div class="btn-group btn-group-toggle @DisabledAddColumnButtonAttribute" data-toggle="buttons">
                                <label class="btn @BtnClassIsPrimaryKeyAttribute @ActiveWhenIsPrimaryKeyAttribute">
                                    <input type="radio" autocomplete="off" name="isautogenerated" value="@true" checked="@IsPrimaryKey" @onclick="@ToggleIsPrimaryKey" />Yes
                                </label>
                                <label class="btn @BtnClassIsPrimaryKeyAttribute @ActiveWhenIsNotPrimaryKeyAttribute">
                                    <input type="radio" autocomplete="off" name="isautogenerated" value="@false" checked="@(!IsPrimaryKey)" @onclick="@ToggleIsPrimaryKey" />No
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


@code {

    private string DisabledTableInputAttribute { get => currentDatabaseModel == null ? "disabled" : String.Empty; }
    private string DisabledDeleteTableButtonAttribute { get => currentDatabaseModel == null || currentTableModel == null ? "disabled" : String.Empty; }
    private string DisabledAddColumnButtonAttribute { get => currentTableModel == null ? "disabled" : String.Empty; }
    private string DisabledDeleteColumnButtonAttribute { get => currentTableModel == null || currentColumModel == null ? "disabled" : String.Empty; }

    private string ActiveAttributeWhenTableIsCurrentTableModel(ITableModel tableModel)
    {
        return currentTableModel == tableModel ? "active" : String.Empty;
    }

    private string ActiveAttributeWhenTableIsCurrentColumnModel(IColumnModel columnModel)
    {
        return currentColumModel == columnModel ? "active" : String.Empty;
    }

    private string BtnClassIsAutoGeneratedAttribute
    {
        get { return IsAutoGenerated ? "btn-success" : "btn-danger"; }
    }

    private string ActiveWhenIsAutoGeneratedAttribute
    {
        get { return IsAutoGenerated ? "active" : ""; }
    }

    private string ActiveWhenIsNotAutoGeneratedAttribute
    {
        get { return !IsAutoGenerated ? "active" : ""; }
    }

    private void ToggleIsAutoGenerated(MouseEventArgs args)
    {
        IsAutoGenerated = !IsAutoGenerated;
    }

    private string TypeSelectAttribute(string typeName)
    {
        return IsSelectedColumnType(typeName) ? "selected" : "";
    }

    private bool IsSelectedColumnType(string typeName)
    {
        if (string.IsNullOrEmpty(typeName)) return false;
        if (currentColumModel == null) return false;
        return currentColumModel.Type == typeName;
    }

    private bool IsAutoGenerated
    {
        get { return currentColumModel?.IsAutoGeneratedValue ?? false; }
        set
        {
            if (currentColumModel == null) return;
            currentColumModel.IsAutoGeneratedValue = value;
        }
    }

    private string BtnClassIsNotNullAttribute
    {
        get { return IsNotNull ? "btn-success" : "btn-danger"; }
    }

    private string ActiveWhenIsNotNullAttribute
    {
        get { return IsNotNull ? "active" : ""; }
    }

    private string ActiveWhenIsNullAttribute
    {
        get { return !IsNotNull ? "active" : ""; }
    }

    private void ToggleIsNotNullGenerated(MouseEventArgs args)
    {
        IsNotNull = !IsNotNull;
    }

    private bool IsNotNull
    {
        get { return currentColumModel?.IsNotNull ?? false; }
        set
        {
            if (currentColumModel == null) return;
            currentColumModel.IsNotNull = value;
        }
    }

    private string BtnClassIsPrimaryKeyAttribute
    {
        get { return IsPrimaryKey ? "btn-success" : "btn-danger"; }
    }

    private string ActiveWhenIsPrimaryKeyAttribute
    {
        get { return IsPrimaryKey ? "active" : ""; }
    }

    private string ActiveWhenIsNotPrimaryKeyAttribute
    {
        get { return !IsPrimaryKey ? "active" : ""; }
    }

    private void ToggleIsPrimaryKey(MouseEventArgs args)
    {
        IsPrimaryKey = !IsPrimaryKey;
    }

    private bool IsPrimaryKey
    {
        get { return currentColumModel?.IsPrimaryKey ?? false; }
        set
        {
            if (currentColumModel == null) return;
            currentColumModel.IsPrimaryKey = value;
        }
    }


    private string CurrentTableModelName
    {
        get => currentTableModel?.Name;
        set
        {
            if (currentTableModel == null) return;
            currentTableModel.Name = value;
        }
    }

    private string CurrentTableModelSchema
    {
        get => currentTableModel?.Schema;
        set
        {
            if (currentTableModel == null) return;
            currentTableModel.Schema = value;
        }
    }

    private string CurrentColumnName
    {
        get => currentColumModel?.Name;
        set
        {
            if (currentColumModel == null) return;
            currentColumModel.Name = value;
        }
    }

    public IList<string> TypeSetNames { get; set; }

    async void SetCurrentDatabaseModel(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        currentDatabaseModel = await dbTemplateService.GetDatabaseModelByPersistenceName(value);
        SetColumnDataTypes();
        TypeSetNames = (await dbTemplateService.GetAllTypeSetsPersistenceNames());
        currentDatabaseModelPersistenceName = value;
        currentTableModel = null;
        currentColumModel = null;
    }

    async void SetColumnDataTypes()
    {
        ColumnDataTypes = ((await dbTemplateService.GetTypeSetByPersistenceName(currentDatabaseModel?.TypeSetName))??new List<TypeSetItem>()).Select(m => m.Name).ToList();
    }

    public string CurrentDatatabaseTypeSet
    {
        get { return currentDatabaseModel?.TypeSetName; }
        set
        {
            if (currentDatabaseModel == null) return;
            currentDatabaseModel.TypeSetName = value;
            SetColumnDataTypes();
        }
    }

    public string CurrentDatabaseConnectionString
    {
        get { return currentDatabaseModel?.ConnectionString; }
        set { 
            if (currentDatabaseModel == null) return;
            currentDatabaseModel.ConnectionString = value;
        }
    }

    int currentCount = 0;

    IList<string> databaseModelPersistenceNames;
    IList<IDatabaseModel> databaseModels;
    string currentDatabaseModelPersistenceName;
    IDatabaseModel currentDatabaseModel;
    ITableModel currentTableModel;
    IColumnModel currentColumModel;

    private IList<string> ColumnDataTypes = new List<string> { };

    protected override async Task OnInitializedAsync()
    {
        databaseModelPersistenceNames = await dbTemplateService.GetDatabaseModelPeristenceNames();
        databaseModels = new List<IDatabaseModel>();
    }


    void IncrementCount()
    {
        currentCount++;
    }

    void CreateDatabaseModel()
    {
        var createdDatabaseModel = new DatabaseModel() { Tables = new List<ITableModel>() };
        currentDatabaseModel = createdDatabaseModel;
        currentDatabaseModel.Tables = new List<ITableModel>();
        databaseModels.Add(createdDatabaseModel);
        currentTableModel = null;
        currentColumModel = null;
    }

    void SetCurrentTable(ITableModel tableModel)
    {
        currentTableModel = tableModel;
        currentColumModel = null;
    }

    void SetCurrentColumn(IColumnModel columnModel)
    {
        currentColumModel = columnModel;
    }

    public string CurrentColumnModelType
    {
        get { return currentColumModel?.Type; }
        set
        {
            if (currentColumModel == null) return;
            currentColumModel.Type = value;
        }
    }

    void SetCurrentColumnType(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        if (currentColumModel != null && ColumnDataTypes.Contains(value)) //TODO Add case management to the communicate to the user (error message)
        {
            currentColumModel.Type = value;
        }
    }

    async Task SaveCurrentDatabase()
    {
        dbTemplateService.SaveDatabaseModel(currentDatabaseModelPersistenceName, currentDatabaseModel);
        databaseModelPersistenceNames = await dbTemplateService.GetDatabaseModelPeristenceNames();
    }

    async Task DeleteCurrentDatabase()
    {
        dbTemplateService.DeleteDatabaseModel(currentDatabaseModelPersistenceName);
        currentDatabaseModelPersistenceName = null;
        currentDatabaseModel = null;
        currentTableModel = null;
        currentColumModel = null;
        databaseModelPersistenceNames = await dbTemplateService.GetDatabaseModelPeristenceNames();
    }

    void CreateTableModel()
    {
        if (currentDatabaseModel == null) return;
        currentTableModel = new TableModel();
        currentTableModel.Name = "Table name here";
        if (currentDatabaseModel.Tables == null) currentDatabaseModel.Tables = new List<ITableModel>();
        currentDatabaseModel.Tables.Add(currentTableModel);
    }

    void DeleteTableModel()
    {
        if (currentDatabaseModel == null) return;
        if (currentTableModel == null) return;
        currentDatabaseModel.Tables.Remove(currentTableModel);
        currentTableModel = null;
    }

    void CreateColumnModel()
    {
        if (currentTableModel == null) return;
        currentColumModel = new ColumnModel();
        currentColumModel.Name = "Column name here";
        if (currentTableModel == null) CreateTableModel();
        if (currentTableModel.Columns == null) currentTableModel.Columns = new List<IColumnModel>();
        currentTableModel.Columns.Add(currentColumModel);
    }

    void DeleteCurrentColumnModel()
    {
        if (currentTableModel == null) return;
        if (currentColumModel == null) return;
        currentTableModel.Columns.Remove(currentColumModel);
        currentColumModel = null;
    }
}
