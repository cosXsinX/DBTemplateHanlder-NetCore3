@page "/database-model-designer"
@using DBTemplateHandler.Core.Database
@using DBTemplateHandler.Studio.Data
@using DBTemplateHandler.Persistance.Serializable
@inject DBTemplateService dbTemplateService


<div class="container">
    <h1>Database Designer</h1>
    <div class="row form-group">
        <div class="col-2 text-primary">
            <h5>Databases</h5>
        </div>
        <div class="col-2 btn-group">
            <button class="btn btn-primary" @onclick="@CreateDatabaseModel"><span class="oi oi-plus" /></button>
            <button class="btn btn-secondary" @onclick="@SaveCurrentDatabase">Save</button>
            <button class="btn btn-danger" @onclick="@DeleteCurrentDatabase"><span class="oi oi-trash"></span></button>
        </div>
        <div class="col-4 input-group">
            <div class="input-group-prepend">
                <span class="input-group-text">Name</span>
            </div>
            <input type="text" class="form-control" @bind="@currentDatabaseModelPersistenceName" />
        </div>
        <div class="col-4 input-group">
            <div class="input-group-prepend">
                <span class="input-group-text">Choose</span>
            </div>
            @if (databaseModelPersistenceNames != null)
            {
                <select class="form-control" @onchange="@SetCurrentDatabaseModel">
                    <option value="">-- Select Database model --</option>
                    @foreach (var databaseModelPersistenceName in databaseModelPersistenceNames)
                    {
                        <option value="@databaseModelPersistenceName">@databaseModelPersistenceName</option>
                    }
                </select>
            }
        </div>
    </div>
    <div class="row form-group">
        <div class="col-2 text-primary">
            <h5>Type set</h5>
        </div>
        <div class="col-4 input-group">
            <div class="input-group-prepend">
                <span class="input-group-text">Choose</span>
            </div>
            @if (TypeSetNames != null)
            {
                <select class="form-control" @bind="CurrentDatatabaseTypeSet">
                    <option value="">-- Select Database model --</option>
                    @foreach (var typeSetName in TypeSetNames)
                    {
                        <option value="@typeSetName">@typeSetName</option>
                    }
                </select>
            }
        </div>
    </div>
    <div class="row form-group">
        <div class="col-2 text-primary">
            <h5>Source</h5>
        </div>
        <div class="col-10 input-group">
            <div class="input-group-prepend">
                <span class="input-group-text">Connection string</span>
            </div>
            <input type="text" class="form-control" @bind="@CurrentDatabaseConnectionString" />
        </div>
    </div>
    <div class="row form-group">
        <div class="col-4">
            <div class="row">
                <h3>Tables</h3>
            </div>
            <div class="row">
                <div class="col-12">
                    <button class="btn btn-primary @DisabledTableInputAttribute" @onclick="@CreateTableModel">Add New</button>
                    <button class="btn btn-danger @DisabledDeleteTableButtonAttribute" @onclick="@DeleteTableModel">Delete</button>
                </div>
            </div>
            <div class="row">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Name</span>
                    </div>
                    <input type="text" class="form-control @DisabledTableInputAttribute" @bind="@CurrentTableModelName" />
                </div>
            </div>
            <div class="row">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Schema</span>
                    </div>
                    <input type="text" class="form-control @DisabledTableInputAttribute" @bind="@CurrentTableModelSchema" />
                </div>
            </div>
            <div class="row pre-scrollable">
                <div class="col-12">
                    @if (currentDatabaseModel != null)
                    {
                        <ul class="list-group" rows="10">
                            @foreach (var tableModel in currentDatabaseModel.Tables.OrderBy(tableModel => $"{tableModel.Schema}-{tableModel.Name}"))
                            {
                                <li class="list-group-item @ActiveAttributeWhenTableIsCurrentTableModel(tableModel)" @onclick="@(() => SetCurrentTable(tableModel))">@tableModel.Schema - @tableModel.Name</li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
        <div class="col-4">
            <div class="row">
                <h3>Columns</h3>
            </div>
            <div class="row">
                <div class="col-12">
                    <button class="btn btn-primary @DisabledAddColumnButtonAttribute" @onclick="@CreateColumnModel">Add New</button>
                    <button class="btn btn-danger @DisabledDeleteColumnButtonAttribute" @onclick="@DeleteCurrentColumnModel">Delete</button>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Name</span>
                        </div>
                        <input type="text" class="form-control" @bind="@CurrentColumnName" />
                    </div>
                </div>
            </div>
            <div class="row pre-scrollable">
                <div class="col-12">
                    @if (currentTableModel != null && currentTableModel.Columns != null)
                    {
                        <ul class="list-group" rows="10">
                            @foreach (var column in currentTableModel.Columns)
                            {
                                <li class="list-group-item @ActiveAttributeWhenTableIsCurrentColumnModel(column)" @onclick="@(() => SetCurrentColumn(column))">@column.Name</li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
        <div class="col-4">
            <div class="row">
                <h3>Current column</h3>
            </div>
            <div class="row input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Value Max Size</span>
                </div>
                @if (ColumnDataTypes != null)
                {
                    <select class="form-control @DisabledAddColumnButtonAttribute" @bind="@CurrentColumnModelType">
                        <option value="">-- Select Type --</option>
                        @foreach (var currentType in ColumnDataTypes)
                        {
                            <option value="@currentType">@currentType</option>
                        }
                    </select>
                }
            </div>
            <div class="row input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text">Value Max Size</span>
                </div>
                <input type="text" class="form-control" @bind="@CurrentColumnValueMaxSize" />
            </div>
            <div class="row">
                <div class="col-12 input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Is Auto</span>
                    </div>
                    <div class="input-group-append">
                        <div class="btn-group btn-group-toggle @DisabledAddColumnButtonAttribute" data-toggle="buttons">
                            <label class="btn @BtnClassIsAutoGeneratedAttribute @ActiveWhenIsAutoGeneratedAttribute">
                                <input type="radio" autocomplete="off" name="isautogenerated" value="@true" checked="@IsAutoGenerated" @onclick="@ToggleIsAutoGenerated" />Yes
                            </label>
                            <label class="btn @BtnClassIsAutoGeneratedAttribute @ActiveWhenIsNotAutoGeneratedAttribute">
                                <input type="radio" autocomplete="off" name="isautogenerated" value="@false" checked="@(!IsAutoGenerated)" @onclick="@ToggleIsAutoGenerated" />No
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Is Not Null</span>
                    </div>
                    <div class="input-group-append">
                        <div class="btn-group btn-group-toggle @DisabledAddColumnButtonAttribute" data-toggle="buttons">
                            <label class="btn @BtnClassIsNotNullAttribute @ActiveWhenIsNotNullAttribute">
                                <input type="radio" autocomplete="off" name="isautogenerated" value="@true" checked="@IsNotNull" @onclick="@ToggleIsNotNullGenerated" />Yes
                            </label>
                            <label class="btn @BtnClassIsNotNullAttribute @ActiveWhenIsNullAttribute">
                                <input type="radio" autocomplete="off" name="isautogenerated" value="@false" checked="@(!IsNotNull)" @onclick="@ToggleIsNotNullGenerated" />No
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Is Primary Key</span>
                    </div>
                    <div class="input-group-append">
                        <div class="btn-group btn-group-toggle @DisabledAddColumnButtonAttribute" data-toggle="buttons">
                            <label class="btn @BtnClassIsPrimaryKeyAttribute @ActiveWhenIsPrimaryKeyAttribute">
                                <input type="radio" autocomplete="off" name="isautogenerated" value="@true" checked="@IsPrimaryKey" @onclick="@ToggleIsPrimaryKey" />Yes
                            </label>
                            <label class="btn @BtnClassIsPrimaryKeyAttribute @ActiveWhenIsNotPrimaryKeyAttribute">
                                <input type="radio" autocomplete="off" name="isautogenerated" value="@false" checked="@(!IsPrimaryKey)" @onclick="@ToggleIsPrimaryKey" />No
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12 input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Is Indexed</span>
                    </div>
                    <div class="input-group-append">
                        <div class="btn-group btn-group-toggle @DisabledAddColumnButtonAttribute" data-toggle="buttons">
                            <label class="btn @BtnClassIsIndexedAttribute @ActiveWhenIsIndexedAttribute">
                                <input type="radio" autocomplete="off" name="isautogenerated" value="@true" checked="@IsIndexed" @onclick="@ToggleIsIndexed" />Yes
                            </label>
                            <label class="btn @BtnClassIsIndexedAttribute @ActiveWhenIsNotIndexedKeyAttribute">
                                <input type="radio" autocomplete="off" name="isautogenerated" value="@false" checked="@(!IsIndexed)" @onclick="@ToggleIsIndexed" />No
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="ui-menu-divider" />
    <div class="row form-group">
        <div class="col-12">
            <div class="row">
                <div class="col-12">
                    <h3>Table Foreign Key Constraints</h3>
                </div>
            </div>
            <div class="row">
                <div class="col-4">
                    <div class="row">
                        <h4>Constraints</h4>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <button class="btn btn-primary @DisabledAddForeignKeyConstraintButtonAttribute" @onclick="@CreateForeignKeyConstraintModel">Add New</button>
                            <button class="btn btn-danger @DisabledDeleteForeignKeyConstraintButtonAttribute" @onclick="@DeleteCurrentForeignKeyConstraintModel">Delete</button>
                        </div>
                    </div>
                    <div class="row pre-scrollable">
                        <div class="col-12">
                            @if (currentTableModel != null && currentTableModel.ForeignKeyConstraints != null)
                            {
                                <ul class="list-group" rows="10">
                                    @foreach (var foreaignKeyConstraint in currentTableModel.ForeignKeyConstraints)
                                    {
                                        <li class="list-group-item @ActiveAttributeWhenForeignKeyConstraintIsCurrentForeignKeyConstraint(foreaignKeyConstraint)"
                                            @onclick="@(() => SetCurrentForeignKeyConstraint(foreaignKeyConstraint))">@foreaignKeyConstraint.ConstraintName</li>
                                        }
                                </ul>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div class="row">
                        <h4>Current Foreign Key Constraints</h4>
                    </div>

                    <div class="row">
                        <div class="col-12">
                            <button class="btn btn-primary @DisabledAddForeignKeyConstraintElementButtonAttribute" @onclick="@CreateForeignKeyConstraintElementModel">Add New</button>
                            <button class="btn btn-danger @DisabledDeleteForeignKeyConstraintElementButtonAttribute" @onclick="@DeleteCurrentForeignKeyConstraintElementModel">Delete</button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text">Name</span>
                            </div>
                            <input type="text" class="form-control" @bind="@CurrentForeignKeyConstraintName" />
                        </div>
                    </div>
                    <div class="row pre-scrollable">
                        <div class="col-12">
                            @if (currentForeignKeyConstraint != null && currentForeignKeyConstraint.Elements != null)
                            {
                                <ul class="list-group" rows="10">
                                    @foreach (var element in currentForeignKeyConstraint.Elements)
                                    {
                                        <li class="list-group-item list-group-item-action flex-column align-items-start
                                            @ActiveAttributeWhenForeignKeyConstraintElementIsCurrentForeignKeyConstraintElement(element)" @onclick="@(() => SetCurrentForeignKeyConstraintElement(element))">
                                            <div class="row">
                                                <div class="col-12">
                                                    <p>Constrained : @(element?.Primary?.ColumnName)</p>
                                                    <p>Foreign ref : @(element?.Foreign?.SchemaName) -> @(element?.Foreign?.TableName) -> @(element?.Foreign?.ColumnName)</p>
                                                </div>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                </div>
                <div class="col-4">
                    <div class="row">
                        <h4>Constraint component</h4>
                        <div class="row">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">Constrained Column</span>
                                </div>
                                <input type="text" class="form-control disabled" @bind="@CurrentForeignKeyConstraintElementPrimaryColumnName" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">External ref schema</span>
                                </div>
                                <input type="text" class="form-control disabled" @bind="@CurrentForeignKeyConstraintElementForeignSchemaName" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">External ref table</span>
                                </div>
                                <input type="text" class="form-control disabled" @bind="@CurrentForeignKeyConstraintElementForeignTableName" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">External ref column</span>
                                </div>
                                <input type="text" class="form-control disabled" @bind="@CurrentForeignKeyConstraintElementForeignColumnName" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    private string DisabledTableInputAttribute { get => currentDatabaseModel == null ? "disabled" : String.Empty; }
    private string DisabledDeleteTableButtonAttribute { get => currentDatabaseModel == null || currentTableModel == null ? "disabled" : String.Empty; }
    private string DisabledAddColumnButtonAttribute { get => currentTableModel == null ? "disabled" : String.Empty; }
    private string DisabledDeleteColumnButtonAttribute { get => currentTableModel == null || currentColumModel == null ? "disabled" : String.Empty; }
    private string DisabledAddForeignKeyConstraintButtonAttribute { get => currentTableModel == null ? "disabled" : String.Empty; }
    private string DisabledDeleteForeignKeyConstraintButtonAttribute { get => currentTableModel == null || currentForeignKeyConstraint == null ? "disabled" : String.Empty; }
    private string DisabledAddForeignKeyConstraintElementButtonAttribute { get => currentForeignKeyConstraint == null ? "disabled" : String.Empty; }
    private string DisabledDeleteForeignKeyConstraintElementButtonAttribute { get => currentForeignKeyConstraint == null || currentForeignKeyConstraintElement == null ? "disabled" : String.Empty; }

    private string ActiveAttributeWhenTableIsCurrentTableModel(ITableModel tableModel)
    {
        return currentTableModel == tableModel ? "active" : String.Empty;
    }

    private string ActiveAttributeWhenTableIsCurrentColumnModel(IColumnModel columnModel)
    {
        return currentColumModel == columnModel ? "active" : String.Empty;
    }

    private string ActiveAttributeWhenForeignKeyConstraintIsCurrentForeignKeyConstraint(IForeignKeyConstraintModel foreignKeyConstraintModel)
    {
        return foreignKeyConstraintModel == currentForeignKeyConstraint ? "active" : String.Empty;
    }

    private string ActiveAttributeWhenForeignKeyConstraintElementIsCurrentForeignKeyConstraintElement(IForeignKeyConstraintElementModel foreignKeyConstraintElementModel)
    {
        return foreignKeyConstraintElementModel == currentForeignKeyConstraintElement ? "active" : String.Empty;
    }

    private string BtnClassIsAutoGeneratedAttribute
    {
        get { return IsAutoGenerated ? "btn-success" : "btn-danger"; }
    }

    private string ActiveWhenIsAutoGeneratedAttribute
    {
        get { return IsAutoGenerated ? "active" : ""; }
    }

    private string ActiveWhenIsNotAutoGeneratedAttribute
    {
        get { return !IsAutoGenerated ? "active" : ""; }
    }

    private void ToggleIsAutoGenerated(MouseEventArgs args)
    {
        IsAutoGenerated = !IsAutoGenerated;
    }

    private string TypeSelectAttribute(string typeName)
    {
        return IsSelectedColumnType(typeName) ? "selected" : "";
    }

    private bool IsSelectedColumnType(string typeName)
    {
        if (string.IsNullOrEmpty(typeName)) return false;
        if (currentColumModel == null) return false;
        return currentColumModel.Type == typeName;
    }

    private bool IsAutoGenerated
    {
        get { return currentColumModel?.IsAutoGeneratedValue ?? false; }
        set
        {
            if (currentColumModel == null) return;
            currentColumModel.IsAutoGeneratedValue = value;
        }
    }

    private string BtnClassIsNotNullAttribute
    {
        get { return IsNotNull ? "btn-success" : "btn-danger"; }
    }

    private string ActiveWhenIsNotNullAttribute
    {
        get { return IsNotNull ? "active" : ""; }
    }

    private string ActiveWhenIsNullAttribute
    {
        get { return !IsNotNull ? "active" : ""; }
    }

    private void ToggleIsNotNullGenerated(MouseEventArgs args)
    {
        IsNotNull = !IsNotNull;
    }

    private bool IsNotNull
    {
        get { return currentColumModel?.IsNotNull ?? false; }
        set
        {
            if (currentColumModel == null) return;
            currentColumModel.IsNotNull = value;
        }
    }

    private string BtnClassIsPrimaryKeyAttribute
    {
        get { return IsPrimaryKey ? "btn-success" : "btn-danger"; }
    }

    private string ActiveWhenIsPrimaryKeyAttribute
    {
        get { return IsPrimaryKey ? "active" : ""; }
    }

    private string ActiveWhenIsNotPrimaryKeyAttribute
    {
        get { return !IsPrimaryKey ? "active" : ""; }
    }

    private void ToggleIsPrimaryKey(MouseEventArgs args)
    {
        IsPrimaryKey = !IsPrimaryKey;
    }

    private bool IsPrimaryKey
    {
        get { return currentColumModel?.IsPrimaryKey ?? false; }
        set
        {
            if (currentColumModel == null) return;
            currentColumModel.IsPrimaryKey = value;
        }
    }

    private string BtnClassIsIndexedAttribute
    {
        get { return IsIndexed ? "btn-success" : "btn-danger"; }
    }

    private string ActiveWhenIsIndexedAttribute
    {
        get { return IsIndexed ? "active" : ""; }
    }

    private string ActiveWhenIsNotIndexedKeyAttribute
    {
        get { return !IsIndexed ? "active" : ""; }
    }

    private void ToggleIsIndexed(MouseEventArgs args)
    {
        IsPrimaryKey = !IsPrimaryKey;
    }

    private bool IsIndexed
    {
        get { return currentColumModel?.IsIndexed ?? false; }
        set
        {
            if (CurrentColumnModelType == null) return;
            currentColumModel.IsIndexed = value;
        }
    }


    private string CurrentTableModelName
    {
        get => currentTableModel?.Name;
        set
        {
            if (currentTableModel == null) return;
            currentTableModel.Name = value;
        }
    }

    private string CurrentTableModelSchema
    {
        get => currentTableModel?.Schema;
        set
        {
            if (currentTableModel == null) return;
            currentTableModel.Schema = value;
        }
    }

    private string CurrentColumnName
    {
        get => currentColumModel?.Name;
        set
        {
            if (currentColumModel == null) return;
            currentColumModel.Name = value;
        }
    }

    private int? CurrentColumnValueMaxSize
    {
        get => currentColumModel?.ValueMaxSize;
        set
        {
            if (currentColumModel == null) return;
            currentColumModel.ValueMaxSize = value.Value;
        }
    }

    private string CurrentForeignKeyConstraintName
    {
        get => currentForeignKeyConstraint?.ConstraintName;
        set
        {
            if (currentForeignKeyConstraint == null) return;
            currentForeignKeyConstraint.ConstraintName = value;
        }
    }

    private string CurrentForeignKeyConstraintElementPrimaryColumnName
    {
        get => currentForeignKeyConstraintElement?.Primary?.ColumnName;
        set
        {
            if (currentForeignKeyConstraintElement == null) return;
            if (currentForeignKeyConstraintElement.Primary == null) return;
            currentForeignKeyConstraintElement.Primary.ColumnName = value;
        }
    }

    private string CurrentForeignKeyConstraintElementForeignColumnName
    {
        get => currentForeignKeyConstraintElement?.Foreign?.ColumnName;
        set
        {
            if (currentForeignKeyConstraintElement == null) return;
            if (currentForeignKeyConstraintElement.Foreign == null) return;
            currentForeignKeyConstraintElement.Foreign.ColumnName = value;
        }
    }

    private string CurrentForeignKeyConstraintElementForeignTableName
    {
        get => currentForeignKeyConstraintElement?.Foreign?.TableName;
        set
        {
            if (currentForeignKeyConstraintElement == null) return;
            if (currentForeignKeyConstraintElement.Foreign == null) return;
            currentForeignKeyConstraintElement.Foreign.TableName = value;
        }
    }

    private string CurrentForeignKeyConstraintElementForeignSchemaName
    {
        get => currentForeignKeyConstraintElement?.Foreign?.SchemaName;
        set
        {
            if (currentForeignKeyConstraintElement == null) return;
            if (currentForeignKeyConstraintElement.Foreign == null) return;
            currentForeignKeyConstraintElement.Foreign.SchemaName = value;
        }
    }

    public IList<string> TypeSetNames { get; set; }

    async void SetCurrentDatabaseModel(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        currentDatabaseModel = await dbTemplateService.GetDatabaseModelByPersistenceName(value);
        SetColumnDataTypes();
        TypeSetNames = (await dbTemplateService.GetAllTypeSetsPersistenceNames());
        currentDatabaseModelPersistenceName = value;
        currentTableModel = null;
        currentColumModel = null;
    }

    async void SetColumnDataTypes()
    {
        ColumnDataTypes = ((await dbTemplateService.GetTypeSetByPersistenceName(currentDatabaseModel?.TypeSetName)) ?? new List<TypeSetItem>()).Select(m => m.Name).ToList();
    }

    public string CurrentDatatabaseTypeSet
    {
        get { return currentDatabaseModel?.TypeSetName; }
        set
        {
            if (currentDatabaseModel == null) return;
            currentDatabaseModel.TypeSetName = value;
            SetColumnDataTypes();
        }
    }

    public string CurrentDatabaseConnectionString
    {
        get { return currentDatabaseModel?.ConnectionString; }
        set
        {
            if (currentDatabaseModel == null) return;
            currentDatabaseModel.ConnectionString = value;
        }
    }

    int currentCount = 0;

    IList<string> databaseModelPersistenceNames;
    IList<IDatabaseModel> databaseModels;
    string currentDatabaseModelPersistenceName;
    IDatabaseModel currentDatabaseModel;
    ITableModel currentTableModel;
    IColumnModel currentColumModel;
    IForeignKeyConstraintModel currentForeignKeyConstraint;
    IForeignKeyConstraintElementModel currentForeignKeyConstraintElement;

    private IList<string> ColumnDataTypes = new List<string> { };

    protected override async Task OnInitializedAsync()
    {
        databaseModelPersistenceNames = await dbTemplateService.GetDatabaseModelPeristenceNames();
        databaseModels = new List<IDatabaseModel>();
    }


    void IncrementCount()
    {
        currentCount++;
    }

    void CreateDatabaseModel()
    {
        var createdDatabaseModel = new DatabaseModel() { Tables = new List<ITableModel>() };
        currentDatabaseModel = createdDatabaseModel;
        currentDatabaseModel.Tables = new List<ITableModel>();
        databaseModels.Add(createdDatabaseModel);
        currentTableModel = null;
        currentColumModel = null;
    }

    void SetCurrentTable(ITableModel tableModel)
    {
        currentTableModel = tableModel;
        currentColumModel = null;
        currentForeignKeyConstraint = null;
    }

    void SetCurrentColumn(IColumnModel columnModel)
    {
        currentColumModel = columnModel;
    }

    void SetCurrentForeignKeyConstraint(IForeignKeyConstraintModel foreignKeyConstraintModel)
    {
        currentForeignKeyConstraint = foreignKeyConstraintModel;
        currentForeignKeyConstraintElement = null;
    }

    void SetCurrentForeignKeyConstraintElement(IForeignKeyConstraintElementModel foreignKeyConstraintElementModel)
    {
        currentForeignKeyConstraintElement = foreignKeyConstraintElementModel;
    }

    public string CurrentColumnModelType
    {
        get { return currentColumModel?.Type; }
        set
        {
            if (currentColumModel == null) return;
            currentColumModel.Type = value;
        }
    }

    void SetCurrentColumnType(ChangeEventArgs e)
    {
        var value = e.Value.ToString();
        if (currentColumModel != null && ColumnDataTypes.Contains(value)) //TODO Add case management to the communicate to the user (error message)
        {
            currentColumModel.Type = value;
        }
    }

    async Task SaveCurrentDatabase()
    {
        dbTemplateService.SaveDatabaseModel(currentDatabaseModelPersistenceName, currentDatabaseModel);
        databaseModelPersistenceNames = await dbTemplateService.GetDatabaseModelPeristenceNames();
    }

    async Task DeleteCurrentDatabase()
    {
        dbTemplateService.DeleteDatabaseModel(currentDatabaseModelPersistenceName);
        currentDatabaseModelPersistenceName = null;
        currentDatabaseModel = null;
        currentTableModel = null;
        currentColumModel = null;
        databaseModelPersistenceNames = await dbTemplateService.GetDatabaseModelPeristenceNames();
    }

    void CreateTableModel()
    {
        if (currentDatabaseModel == null) return;
        currentTableModel = new TableModel();
        currentTableModel.Name = "Table name here";
        if (currentDatabaseModel.Tables == null) currentDatabaseModel.Tables = new List<ITableModel>();
        currentDatabaseModel.Tables.Add(currentTableModel);
    }

    void DeleteTableModel()
    {
        if (currentDatabaseModel == null) return;
        if (currentTableModel == null) return;
        currentDatabaseModel.Tables.Remove(currentTableModel);
        currentTableModel = null;
    }

    void CreateColumnModel()
    {
        if (currentTableModel == null) return;
        currentColumModel = new ColumnModel();
        currentColumModel.Name = "Column name here";
        if (currentTableModel == null) CreateTableModel();
        if (currentTableModel.Columns == null) currentTableModel.Columns = new List<IColumnModel>();
        currentTableModel.Columns.Add(currentColumModel);
    }

    void DeleteCurrentColumnModel()
    {
        if (currentTableModel == null) return;
        if (currentColumModel == null) return;
        currentTableModel.Columns.Remove(currentColumModel);
        currentColumModel = null;
    }

    void CreateForeignKeyConstraintModel()
    {
        if (currentTableModel == null) return;
        currentForeignKeyConstraint = new ForeignKeyConstraintModel();
        currentForeignKeyConstraint.ConstraintName = "Foreign key constraint name here";
        if (currentTableModel.ForeignKeyConstraints == null) currentTableModel.ForeignKeyConstraints = new List<IForeignKeyConstraintModel>();
        currentTableModel.ForeignKeyConstraints.Add(currentForeignKeyConstraint);
    }

    void DeleteCurrentForeignKeyConstraintModel()
    {
        if (currentTableModel == null) return;
        if (currentForeignKeyConstraint == null) return;
        currentTableModel.ForeignKeyConstraints.Remove(currentForeignKeyConstraint);
        currentForeignKeyConstraint = null;
    }

    void CreateForeignKeyConstraintElementModel()
    {
        if (currentTableModel == null) return;
        if (currentForeignKeyConstraint == null) return;
        currentForeignKeyConstraintElement = new ForeignKeyConstraintElementModel()
        {
            Primary = new ColumnReferenceModel()
            {
                SchemaName = currentTableModel.Schema,
                TableName = currentTableModel.Name,
            },
            Foreign = new ColumnReferenceModel()
        };
        if (currentForeignKeyConstraint.Elements == null) currentForeignKeyConstraint.Elements = new List<IForeignKeyConstraintElementModel>();
        currentForeignKeyConstraint.Elements.Add(currentForeignKeyConstraintElement);
    }

    void DeleteCurrentForeignKeyConstraintElementModel()
    {
        if (currentTableModel == null) return;
        if (currentForeignKeyConstraint == null) return;
        if (currentForeignKeyConstraintElement == null) return;
        currentForeignKeyConstraint.Elements.Remove(currentForeignKeyConstraintElement);
        currentForeignKeyConstraintElement = null;
    }
}
