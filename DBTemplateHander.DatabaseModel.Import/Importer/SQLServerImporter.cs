using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using DBTemplateHander.DatabaseModel.Import.Importer.SQLServerImporterComponents.Models;
using DBTemplateHander.DatabaseModel.Import.Importer.SQLServerImporterComponents.ModelsDao;
using DBTemplateHandler.Core.Database;
using DBTemplateHandler.Utils;

namespace DBTemplateHander.DatabaseModel.Import.Importer
{
    public class SQLServerImporter : IImporter
    {
        private readonly SQLServerDatabaseDao sqlServerDatabaseDao = new SQLServerDatabaseDao();
        private readonly SQLServerTableDao sqlServerTableDao = new SQLServerTableDao();
        private readonly SQLServerColumnDao sqlServerColummnDao = new SQLServerColumnDao();
        private readonly SQLServerInformationSchemaConstraintColumnUsageDao sqlServerInformationSchemaConstraintColumnUsageDao = new SQLServerInformationSchemaConstraintColumnUsageDao();
        private readonly SQLServerSysKeyConstraintDao sqlServerSysKeyConstraintDao = new SQLServerSysKeyConstraintDao();

        

        public string ManagedDbSystem => "Sql Server 2016";

        public IDatabaseModel Import(string connectionString)
        {
            SqlConnection sqlConnection = new SqlConnection(connectionString);
            sqlConnection.Open();
            var databaseModels = sqlServerDatabaseDao.GetAll(sqlConnection);
            var tableModels = sqlServerTableDao.GetAll(sqlConnection);
            var columnModels = sqlServerColummnDao.GetAll(sqlConnection);
            sqlConnection.Close();
             

            IList<Tuple<SQLServerDatabaseModel, SQLServerTableModel, SQLServerColumnModel>> sqlModels = 
                databaseModels
                .LeftJoin(tableModels, m => true, m => true)
                .LeftJoin(columnModels, m => m.Item2.object_id, m => m.object_id)
                .Select(m => Tuple.Create(m.Item1.Item1,m.Item1.Item2,m.Item2)).ToList();
            ;

            IDatabaseModel databaseModel = ToDatabaseModel(sqlModels);
            return databaseModel;
        }

        public IDatabaseModel ToDatabaseModel(IList<Tuple<SQLServerDatabaseModel, SQLServerTableModel,SQLServerColumnModel>> sqlModels)
        {
            var SqlServerTableModels = sqlModels
                .GroupBy(m => m.Item2.object_id)
                .Select(m => Tuple.Create(m.First().Item2,m.Select(j => j.Item3).ToList())).ToList();
            var sqlServerDatabaseModel = sqlModels.FirstOrDefault()?.Item1;
            var result = ToDatabaseModel(sqlServerDatabaseModel,SqlServerTableModels);
            return result;
        }


        public IDatabaseModel ToDatabaseModel(SQLServerDatabaseModel sqlDatabaseModel, IList<Tuple<SQLServerTableModel, List<SQLServerColumnModel>>> sqlTableAndColumnsTuples)
        {
            if (sqlDatabaseModel == null) return null;
            var result = new ImportedDatabaseModel();
            result.Name = sqlDatabaseModel.database_name??"Unknown Database";
            result.Tables = sqlTableAndColumnsTuples.Select(ToTableModel).ToList();
            return result;
        }

        public ITableModel ToTableModel(Tuple<SQLServerTableModel,List<SQLServerColumnModel>> sqlTableAndColumns)
        {
            var result = new ImporterTableModel();
            result.Name = sqlTableAndColumns.Item1.name;
            result.Columns = sqlTableAndColumns.Item2.Select(ToColumnModel).ToList();
            return result;
        }

        public IColumnModel ToColumnModel(SQLServerColumnModel converted)
        {
            var result = new ImporterColumnModel();
            result.Name = converted.name;
            //result.IsPrimaryKey = //TODO => Must get indexes to know if it is a primary key or not
            result.IsAutoGeneratedValue = converted.is_identity; //TODO not sure about the mapping
            result.IsNotNull = !converted.is_nullable;
            return result;
        }


        


        public class ImportedDatabaseModel : IDatabaseModel
        {
            public string Name { get;set; }
            public IList<ITableModel> Tables { get;set; }
        }

        public class ImporterTableModel : ITableModel
        {
            public IList<IColumnModel> Columns { get;set; }
            public string Name { get;set; }
            public IDatabaseModel ParentDatabase { get;set; }
        }

        public class ImporterColumnModel : IColumnModel
        {
            public bool IsAutoGeneratedValue { get;set; }
            public bool IsNotNull { get;set; }
            public bool IsPrimaryKey { get;set; }
            public string Name { get;set; }
            public string Type { get;set; }
            public ITableModel ParentTable { get;set; }
        }
    }
}
