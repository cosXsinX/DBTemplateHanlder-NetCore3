using DBTemplateHandler.Core.Database;
using DBTemplateHandler.Persistance.Serializable;
using System.Linq;

namespace DBTemplateHandler.Persistance.Conversion
{
    public class DatabaseModelConverter
    {
        public PersistableDatabaseModel ToPersistable(IDatabaseModel converted)
        {
            if (converted == null) return null;
            var result = new PersistableDatabaseModel();
            result.Name = converted.Name;
            result.ConnectionString = converted.ConnectionString;
            result.TypeSetName = converted.TypeSetName;
            if (converted.Tables != null) result.Tables = converted.Tables.Select(ToPersistable).ToList();
            return result;
        }

        public PersistableTableModel ToPersistable(ITableModel converted)
        {
            var result = new PersistableTableModel();
            result.Name = converted.Name;
            result.Schema = converted.Schema;
            if (converted.Columns != null) result.Columns = converted.Columns.Select(ToPersistable).ToList();
            if (converted.ForeignKeyConstraints != null) result.ForeignKeyConstraints = converted.ForeignKeyConstraints.Select(ToPersistable).ToList();
            return result;
        }

        public PersistableColumnModel ToPersistable(IColumnModel converted)
        {
            var result = new PersistableColumnModel();
            result.IsAutoGeneratedValue = converted.IsAutoGeneratedValue;
            result.IsNotNull = converted.IsNotNull;
            result.IsPrimaryKey = converted.IsPrimaryKey;
            result.Name = converted.Name;
            result.Type = converted.Type;
            result.ValueMaxSize = converted.ValueMaxSize;
            result.IsIndexed = converted.IsIndexed;
            return result;
        }

        public PersistableForeignKeyConstraintModel ToPersistable(IForeignKeyConstraintModel converted)
        {
            var result = new PersistableForeignKeyConstraintModel();
            result.ConstraintName = converted.ConstraintName;
            if (converted.Elements != null) result.Elements = converted.Elements.Select(ToPersistable).ToList();
            return result;
        }

        public PersistableForeignKeyConstraintElementModel ToPersistable(IForeignKeyConstraintElementModel converted)
        {
            var result = new PersistableForeignKeyConstraintElementModel();
            if (converted.Foreign != null) result.Foreign = ToPersistable(converted.Foreign);
            if (converted.Primary != null) result.Primary = ToPersistable(converted.Primary);
            return result;
        }

        public PersistableColumnReferenceModel ToPersistable(IColumnReferenceModel converted)
        {
            var result = new PersistableColumnReferenceModel();
            result.ColumnName = converted.ColumnName;
            result.TableName = converted.TableName;
            result.SchemaName = converted.SchemaName;
            return result;
        }

        public IDatabaseModel ToUnPersisted(PersistableDatabaseModel converted)
        {
            if (converted == null) return null;
            var result = new DatabaseModel();
            result.Name = converted.Name;
            result.ConnectionString = converted.ConnectionString;
            result.TypeSetName = converted.TypeSetName;
            if (converted.Tables != null)
            {
                result.Tables = converted.Tables.Select(ToUnPersisted).ToList();
            }
            return result;
        }

        public ITableModel ToUnPersisted(PersistableTableModel converted)
        {
            var result = new TableModel();
            result.Name = converted.Name;
            result.Schema = converted.Schema;
            if (converted.Columns != null)result.Columns = converted.Columns.Select(ToUnPersisted).ToList();
            if (converted.ForeignKeyConstraints != null) result.ForeignKeyConstraints = converted.ForeignKeyConstraints.Select(ToUnPersisted).ToList();
            return result;
        }

        public IColumnModel ToUnPersisted(PersistableColumnModel converted)
        {
            var result = new ColumnModel();
            result.IsAutoGeneratedValue = converted.IsAutoGeneratedValue;
            result.IsNotNull = converted.IsNotNull;
            result.IsPrimaryKey = converted.IsPrimaryKey;
            result.Name = converted.Name;
            result.Type = converted.Type;
            result.ValueMaxSize = converted.ValueMaxSize;
            result.IsIndexed = converted.IsIndexed;
            return result;
        }

        public IForeignKeyConstraintModel ToUnPersisted(PersistableForeignKeyConstraintModel converted)
        {
            var result = new ForeignKeyConstraintModel();
            result.ConstraintName = converted.ConstraintName;
            if (converted.Elements != null) result.Elements = converted.Elements.Select(ToUnPersisted).ToList();
            return result;
        }

        public IForeignKeyConstraintElementModel ToUnPersisted(PersistableForeignKeyConstraintElementModel converted)
        {
            var result = new ForeignKeyConstraintElementModel();
            if (converted.Foreign != null) result.Foreign = ToUnPersisted(converted.Foreign);
            if (converted.Primary != null) result.Primary = ToUnPersisted(converted.Primary);
            return result;
        }

        public IColumnReferenceModel ToUnPersisted(PersistableColumnReferenceModel converted)
        {
            var result = new ColumnReferenceModel();
            result.ColumnName = converted.ColumnName;
            result.TableName = converted.TableName;
            result.SchemaName = converted.SchemaName;
            return result;
        }
    }
}
