using DBTemplateHandler.Core.Database;
using DBTemplateHandler.Core.Database.MetaDescriptors;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using DBTemplateHandler.Core.TemplateHandlers.Utilities;
using DBTemplateHandler.Core.Configuration;

namespace DBTemplateHandler.Core.TemplateHandlers.Handlers
{
    public class TableTemplateHandler
    {

        private const String COLUMN_PROPERTY_TYPE_KEY = "TYPE";
        private const String COLUMN_PROPERTY_IS_PRIMARY_KEY_KEY = "PRIMARY";
        private const String COLUMN_PROPERTY_IS_AUTOGENERATED_KEY = "AUTO";
        private const String COLUMN_PROPERTY_IS_NOT_NULL_VALUE = "NOT_NULL";
        private const String COLUMN_PROPERTY_IS_FIRST_COLUMN = "IS_FIRST_COLUMN";
        private const String COLUMN_PROPERTY_IS_LAST_COLUMN = "IS_LAST_COLUMN";

        private String _tableNameStr;
        private List<String> _columnNameList;
        private IDictionary<String, Properties> _columnNameIndexedColumnPropertiesMap;
        private AbstractDatabaseDescriptor _databaseDescriptor;



        public TableTemplateHandler(String TableNameStr,
                List<String> ColumnNameList, IDictionary<String, Properties> ColumnNameIndexedColumnPropertiesMap,
                AbstractDatabaseDescriptor databaseDescriptor)
        {
            _tableNameStr = TableNameStr;
            _columnNameList = ColumnNameList;
            _columnNameIndexedColumnPropertiesMap = ColumnNameIndexedColumnPropertiesMap;
            _databaseDescriptor = databaseDescriptor;
        }

        private bool IsWellInitialized()
        {
            bool result = true;
            result = result && (_tableNameStr != null);
            result = result && (_columnNameList != null);
            result = result && (_columnNameIndexedColumnPropertiesMap != null);
            result = result && (_databaseDescriptor != null);
            return result;
        }

        public string generateTableFileFromTemplateFile(string templateFilePath, out List<string> errors)
        {
            errors = new List<string>();
            if (!IsWellInitialized()) return null;
            if (templateFilePath == null) return null;
            String DestinationFileName = Path.GetFileName(templateFilePath);
            if (Path.GetFileName(templateFilePath).Contains(TemplateSemanticReferenceClass.TEMPLATE_NAME_TABLE_NAME_WORD_IDENTIFIER))
            {
                DestinationFileName = Path.GetFileName(templateFilePath).Replace(TemplateSemanticReferenceClass.TEMPLATE_NAME_TABLE_NAME_WORD_IDENTIFIER, _tableNameStr);
                if (DestinationFileName.EndsWith

                        (TemplateSemanticReferenceClass.TEMPLATE_FILE_NAME_EXTENSION, StringComparison.Ordinal))
                {
                    DestinationFileName = DestinationFileName.Substring(0, DestinationFileName.Length - TemplateSemanticReferenceClass.TEMPLATE_FILE_NAME_EXTENSION.Length);
                }
            }
            String resultString = generateFileFromTemplateFilePath(templateFilePath, out var generationErrors);
            errors = errors.Concat(generationErrors).ToList();
            String resultFilePathStr = DatabaseTemplateEditorConfiguration.get_generatedFileFromTemplateDirectoryPathStr() + DestinationFileName;
            if (FileManager.DoesFileExists(resultFilePathStr)) FileManager.DeleteFile(resultFilePathStr);
            FileManager.CreateTextFile(resultFilePathStr, resultString);
            return resultFilePathStr;
        }

        private String generateFileFromTemplateFilePath(string templateFilePath, out List<string> errors)
        {
            errors = new List<string>();
            String result = null;
            if (!IsWellInitialized()) return result;
            if (templateFilePath == null) return result;
            if (!File.Exists(templateFilePath)) return result;
            using (FileStream fileStream = new FileStream(templateFilePath,
                                   FileMode.Open,
                                   FileAccess.Read,
                                   FileShare.ReadWrite))
            {
                using (StreamReader sr = new StreamReader(fileStream))
                {
                    StringBuilder stringBuilder = new StringBuilder();
                    while (sr.Peek() >= 0)
                    {
                        string currentLine = sr.ReadLine();
                        TreateCurrentTemplateLine(stringBuilder, sr, currentLine, out var treatmentErrors);
                        errors = errors.Concat(treatmentErrors).ToList();
                    }
                    result = stringBuilder.ToString();
                }
            }
            return result;
        }

        public String generateOutputStringFromTemplateString(String templateString, out List<string> errors)
        {
            errors = new List<string>();
            String result = null;
            if (!IsWellInitialized()) return result;
            if (templateString == null) return result;
            StringReader reader = new StringReader(templateString);
            byte[] byteArray = Encoding.UTF8.GetBytes(templateString);
            using (MemoryStream stream = new MemoryStream(byteArray))
            {
                using (StreamReader sr = new StreamReader(stream))
                {
                    StringBuilder stringBuilder = new StringBuilder();
                    while (sr.Peek() >= 0)
                    {
                        string currentLine = sr.ReadLine();
                        TreateCurrentTemplateLine(stringBuilder, sr, currentLine, out var treatmentErrors);
                        errors = errors.Concat(treatmentErrors).ToList();
                    }
                    result = stringBuilder.ToString();
                }
            }
            return result;
        }


        private void TreateCurrentTemplateLine(StringBuilder stringBuilder, StreamReader streamReader, String currentLine, out List<string> errors)
        {
            errors = new List<string>();
            if (currentLine.Contains(TemplateSemanticReferenceClass.TEMPLATE_TABLE_WORD))
            {
                currentLine = currentLine.Replace(TemplateSemanticReferenceClass.TEMPLATE_TABLE_WORD, _tableNameStr);
            }

            if (currentLine.Contains(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT))
            {
                TreatForeachColumn(stringBuilder, streamReader, currentLine, out var foreachErrors);
                errors = errors.Concat(foreachErrors).ToList();
                return;
            }
            stringBuilder.Append(currentLine + "\n");
        }

        private bool TreatForeachColumn(StringBuilder stringBuilder, StreamReader streamReader, String ForeachStartContextLine, out List<string> errors)
        {
            errors = new List<string>();
            List<String> foreachColumnContextRowList = new List<String>();
            String[] SplittedForeachStartContextLine =
                    ForeachStartContextLine.
                        Split(new string[] { TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT }, StringSplitOptions.None);
            if (SplittedForeachStartContextLine.Length > 2)
            {
                errors.Add("Database Template handler cannot handle two nested foreach column");
                return false;
            }
            else if (SplittedForeachStartContextLine.Length == 2)
            {
                if (ForeachStartContextLine.EndsWith(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT))
                {
                    stringBuilder.Append(SplittedForeachStartContextLine[0] + "\n");
                }
                else if (ForeachStartContextLine.StartsWith(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT))
                {
                    foreachColumnContextRowList.Add(SplittedForeachStartContextLine[0] + "\n");
                }
                else
                {
                    stringBuilder.Append(SplittedForeachStartContextLine[0]);
                    foreachColumnContextRowList.Add(SplittedForeachStartContextLine[1] + "\n");
                }
            }
            else return false;

            //Loading foreach Column row list context in devoted list
            String rowEndContextAfterContextContentStr = null;
            String currentLine;
            try
            {
                while (streamReader.Peek() >= 0)
                {
                    currentLine = streamReader.ReadLine();
                    if (currentLine.Contains(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_END_CONTEXT))
                    {
                        String[] SplittedForeachEndcContextLine = currentLine.Split(new string[] { TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_END_CONTEXT }, StringSplitOptions.None);
                        if (SplittedForeachEndcContextLine.Length > 2)
                        {
                            errors.Add("Database Template handler cannot handle two nested foreach column");
                            return false;
                        }
                        else if (SplittedForeachEndcContextLine.Length == 2)
                        {
                            foreachColumnContextRowList.Add(SplittedForeachEndcContextLine[0]);
                            rowEndContextAfterContextContentStr = SplittedForeachEndcContextLine[1];
                        }
                        else if (SplittedForeachStartContextLine.Length == 1)
                        {
                            if (ForeachStartContextLine.EndsWith(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT))
                            {
                                stringBuilder.Append(SplittedForeachEndcContextLine[0] + "\n");
                            }
                            else if (ForeachStartContextLine.StartsWith(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_COLUMN_START_CONTEXT))
                            {
                                foreachColumnContextRowList.Add(SplittedForeachEndcContextLine[0]);
                            }
                            else return false;
                        }
                        else return false;
                        break;
                    }
                    foreachColumnContextRowList.Add(currentLine);
                }
            }
            catch (IOException e)
            {
                return false;
            }

            //Foreach column context repetition
            int currentColumnIndexInt;
            String currentColumnNameStr;
            for (currentColumnIndexInt = 0; currentColumnIndexInt < _columnNameList.Count; currentColumnIndexInt++)
            {
                currentColumnNameStr = _columnNameList[currentColumnIndexInt];
                int currentForeachColumnRowIndex;
                String currentForeachColumnRowString;
                for (currentForeachColumnRowIndex = 0; currentForeachColumnRowIndex < foreachColumnContextRowList.Count; currentForeachColumnRowIndex++)
                {
                    currentForeachColumnRowString = foreachColumnContextRowList[currentForeachColumnRowIndex];
                    String treatedRowStr = currentForeachColumnRowString.Replace(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_WORD, currentColumnNameStr) + "\n";
                    treatedRowStr = treatedRowStr.Replace(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_INDEX_COLUMN_WORD, currentColumnIndexInt.ToString());

                    // Primary key column property treatment
                    treatedRowStr = TreatForeachCurrentColumnIfIsPrimaryKeyContext(currentColumnNameStr, treatedRowStr);
                    treatedRowStr = TreatForeachCurrentColumnIfIsNotPrimaryKeyContext(currentColumnNameStr, treatedRowStr);
                    treatedRowStr = TreatForeachCurrentColumnIfIsAutogeneratedValueContext(currentColumnNameStr, treatedRowStr);
                    treatedRowStr = TreatForeachCurrentColumnIfIsNotAutogeneratedValueContext1(currentColumnNameStr, treatedRowStr);
                    treatedRowStr = TreatForeachCurrentColumnIfIsNotNullValueContext(currentColumnNameStr, treatedRowStr);
                    treatedRowStr = TreatForeachCurrentColumnIfIsFirstColumnContext(currentColumnNameStr, treatedRowStr);
                    treatedRowStr = TreatForeachCurrentColumnIfIsNotFirstColumnContext(currentColumnNameStr, treatedRowStr);
                    treatedRowStr = TreatForeachCurrentColumnIfIsLastColumnContext(currentColumnNameStr, treatedRowStr);
                    treatedRowStr = TreatForeachCurrentColumnIfIsNotLastColumnContext(currentColumnNameStr, treatedRowStr);

                    //Table name Replacement
                    treatedRowStr = treatedRowStr.Replace(TemplateSemanticReferenceClass.TEMPLATE_TABLE_WORD, _tableNameStr);

                    if (_columnNameIndexedColumnPropertiesMap.ContainsKey(currentColumnNameStr))
                    {
                        Properties currentColumnProperties = _columnNameIndexedColumnPropertiesMap[currentColumnNameStr];
                        if (currentColumnProperties.ContainsKey(COLUMN_PROPERTY_TYPE_KEY))
                        {
                            String currentColumnTypeStr = currentColumnProperties.getProperty(COLUMN_PROPERTY_TYPE_KEY);
                            treatedRowStr = treatedRowStr.Replace(TemplateSemanticReferenceClass.
                                    TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_WORD, currentColumnTypeStr);
                            treatedRowStr = ReplaceConvertedTypeStringInString(treatedRowStr, currentColumnTypeStr, _databaseDescriptor);
                        }
                    }
                    if (treatedRowStr != null) stringBuilder.Append(treatedRowStr);

                }
            }
            if (rowEndContextAfterContextContentStr != null) stringBuilder.Append(rowEndContextAfterContextContentStr);
            return true;
        }

        //TODO Unit test this code
        private bool _isInForeachCurrentColumnIfIsPrimaryKeyContext = false;
        private String TreatForeachCurrentColumnIfIsPrimaryKeyContext(String CurrentColumnName, String TreatedRowStr)
        {
            int StartContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_PRIMARY_KEY_START_CONTEXT.Length;
            int EndContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_PRIMARY_KEY_END_CONTEXT.Length;

            bool isColumnAPrimaryKey = IsColumnAPrimaryKeyColumn(CurrentColumnName);
            String result = TreatedRowStr;

            int StartContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_PRIMARY_KEY_START_CONTEXT);
            int EndContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_PRIMARY_KEY_END_CONTEXT);

            if (_isInForeachCurrentColumnIfIsPrimaryKeyContext)
            {
                if (EndContextWordIndex < 0)
                {
                    result = (isColumnAPrimaryKey ? result : "");
                }
                else
                {
                    if (isColumnAPrimaryKey)
                    {
                        result = result.Substring(0, EndContextWordIndex) +
                                result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsPrimaryKeyContext = false;
                }
            }
            else
            {

                if (StartContextWordIndex < 0) return result;
                if (EndContextWordIndex < 0)
                {
                    if (isColumnAPrimaryKey)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1);
                    }
                    _isInForeachCurrentColumnIfIsPrimaryKeyContext = true;
                }
                else
                {
                    if (isColumnAPrimaryKey)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, EndContextWordIndex) +
                                    result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsPrimaryKeyContext = false;
                }
            }
            return result;
        }

        //TODO Unit test this code
        private bool _isInForeachCurrentColumnIfIsNotPrimaryKeyContext = false;
        private String TreatForeachCurrentColumnIfIsNotPrimaryKeyContext(String CurrentColumnName, String TreatedRowStr)
        {
            int StartContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_PRIMARY_KEY_START_CONTEXT.Length;
            int EndContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_PRIMARY_KEY_END_CONTEXT.Length;

            bool isColumnAPrimaryKey = IsColumnAPrimaryKeyColumn(CurrentColumnName);
            String result = TreatedRowStr;

            int StartContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_PRIMARY_KEY_START_CONTEXT);
            int EndContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_PRIMARY_KEY_END_CONTEXT);

            if (_isInForeachCurrentColumnIfIsNotPrimaryKeyContext)
            {
                if (EndContextWordIndex < 0)
                {
                    result = (isColumnAPrimaryKey ? "" : result);
                }
                else
                {
                    if (isColumnAPrimaryKey)
                    {
                        result = result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, EndContextWordIndex) +
                            result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotPrimaryKeyContext = false;
                }
            }
            else
            {

                if (StartContextWordIndex < 0) return result;
                if (EndContextWordIndex < 0)
                {
                    if (isColumnAPrimaryKey)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotPrimaryKeyContext = true;
                }
                else
                {
                    if (isColumnAPrimaryKey)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                    result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, EndContextWordIndex) +
                                    result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotPrimaryKeyContext = false;
                }
            }
            return result;
        }


        //TODO Unit test this code
        private bool _isInForeachCurrentColumnIfIsAutogeneratedValueContext = false;
        private String TreatForeachCurrentColumnIfIsAutogeneratedValueContext(String CurrentColumnName, String TreatedRowStr)
        {
            int StartContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_AUTOGENERATED_KEY_START_CONTEXT.Length;
            int EndContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_AUTOGENERATED_KEY_END_CONTEXT.Length;

            bool isColumnAAutogenerated = IsColumnAAutogeneratedValueColumn(CurrentColumnName);
            String result = TreatedRowStr;

            int StartContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_AUTOGENERATED_KEY_START_CONTEXT);
            int EndContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_AUTOGENERATED_KEY_END_CONTEXT);

            if (_isInForeachCurrentColumnIfIsAutogeneratedValueContext)
            {
                if (EndContextWordIndex < 0)
                {
                    result = (isColumnAAutogenerated ? result : "");
                }
                else
                {
                    if (isColumnAAutogenerated)
                    {
                        result = result.Substring(0, EndContextWordIndex) +
                                result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsAutogeneratedValueContext = false;
                }
            }
            else
            {

                if (StartContextWordIndex < 0) return result;
                if (EndContextWordIndex < 0)
                {
                    if (isColumnAAutogenerated)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1);
                    }
                    _isInForeachCurrentColumnIfIsAutogeneratedValueContext = true;
                }
                else
                {
                    if (isColumnAAutogenerated)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, EndContextWordIndex) +
                                    result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsAutogeneratedValueContext = false;
                }
            }
            return result;
        }

        //TODO Unit test this code
        private bool _isInForeachCurrentColumnIfIsNotAutogeneratedValueContext1 = false;
        private String TreatForeachCurrentColumnIfIsNotAutogeneratedValueContext1(String CurrentColumnName, String TreatedRowStr)
        {
            int StartContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_AUTOGENERATED_KEY_START_CONTEXT.Length;
            int EndContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_AUTOGENERATED_KEY_END_CONTEXT.Length;

            bool isColumnAPrimaryKey = IsColumnAAutogeneratedValueColumn(CurrentColumnName);
            String result = TreatedRowStr;

            int StartContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_AUTOGENERATED_KEY_START_CONTEXT);
            int EndContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_AUTOGENERATED_KEY_END_CONTEXT);

            if (_isInForeachCurrentColumnIfIsNotAutogeneratedValueContext1)
            {
                if (EndContextWordIndex < 0)
                {
                    result = (isColumnAPrimaryKey ? "" : result);
                }
                else
                {
                    if (isColumnAPrimaryKey)
                    {
                        result = result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, EndContextWordIndex) +
                            result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotAutogeneratedValueContext1 = false;
                }
            }
            else
            {

                if (StartContextWordIndex < 0) return result;
                if (EndContextWordIndex < 0)
                {
                    if (isColumnAPrimaryKey)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotAutogeneratedValueContext1 = true;
                }
                else
                {
                    if (isColumnAPrimaryKey)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                    result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, EndContextWordIndex) +
                                    result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotAutogeneratedValueContext1 = false;
                }
            }
            return result;
        }


        //TODO Unit test this code
        private bool _isInForeachCurrentColumnIfIsNotNullValueContext = false;
        private String TreatForeachCurrentColumnIfIsNotNullValueContext(String CurrentColumnName, String TreatedRowStr)
        {
            int StartContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_NULL_VALUE_START_CONTEXT.Length;
            int EndContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_NULL_VALUE_END_CONTEXT.Length;

            bool isColumnANotNullValue = IsColumnANotNullValueColumn(CurrentColumnName);
            String result = TreatedRowStr;

            int StartContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_NULL_VALUE_START_CONTEXT);
            int EndContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_NULL_VALUE_END_CONTEXT);

            if (_isInForeachCurrentColumnIfIsNotNullValueContext)
            {
                if (EndContextWordIndex < 0)
                {
                    result = (isColumnANotNullValue ? result : "");
                }
                else
                {
                    if (isColumnANotNullValue)
                    {
                        result = result.Substring(0, EndContextWordIndex) +
                                result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotNullValueContext = false;
                }
            }
            else
            {

                if (StartContextWordIndex < 0) return result;
                if (EndContextWordIndex < 0)
                {
                    if (isColumnANotNullValue)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1);
                    }
                    _isInForeachCurrentColumnIfIsNotNullValueContext = true;
                }
                else
                {
                    if (isColumnANotNullValue)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, EndContextWordIndex) +
                                    result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotNullValueContext = false;
                }
            }
            return result;
        }

        //TODO Unit test this code
        private bool _isInForeachCurrentColumnIfIsFirstColumnContext = false;
        private String TreatForeachCurrentColumnIfIsFirstColumnContext(String CurrentColumnName, String TreatedRowStr)
        {
            int StartContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_FIRST_COLUMN_START_CONTEXT.Length;
            int EndContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_FIRST_COLUMN_END_CONTEXT.Length;

            bool isColumnAFirstColumn = IsColumnAFirstColumn(CurrentColumnName);
            String result = TreatedRowStr;

            int StartContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_FIRST_COLUMN_START_CONTEXT);
            int EndContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_FIRST_COLUMN_END_CONTEXT);

            if (_isInForeachCurrentColumnIfIsFirstColumnContext)
            {
                if (EndContextWordIndex < 0)
                {
                    result = (isColumnAFirstColumn ? result : "");
                }
                else
                {
                    if (isColumnAFirstColumn)
                    {
                        result = result.Substring(0, EndContextWordIndex) +
                                result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsFirstColumnContext = false;
                }
            }
            else
            {

                if (StartContextWordIndex < 0) return result;
                if (EndContextWordIndex < 0)
                {
                    if (isColumnAFirstColumn)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1);
                    }
                    _isInForeachCurrentColumnIfIsFirstColumnContext = true;
                }
                else
                {
                    if (isColumnAFirstColumn)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, EndContextWordIndex) +
                                    result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsFirstColumnContext = false;
                }
            }
            return result;
        }

        //TODO Unit test this code
        private bool _isInForeachCurrentColumnIfIsNotFirstColumnContext = false;
        private String TreatForeachCurrentColumnIfIsNotFirstColumnContext(String CurrentColumnName, String TreatedRowStr)
        {
            int StartContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_FIRST_COLUMN_START_CONTEXT.Length;
            int EndContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_FIRST_COLUMN_END_CONTEXT.Length;

            bool isColumnAFirstColumn = IsColumnAFirstColumn(CurrentColumnName);
            String result = TreatedRowStr;

            int StartContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_FIRST_COLUMN_START_CONTEXT);
            int EndContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_FIRST_COLUMN_END_CONTEXT);

            if (_isInForeachCurrentColumnIfIsNotFirstColumnContext)
            {
                if (EndContextWordIndex < 0)
                {
                    result = (isColumnAFirstColumn ? "" : result);
                }
                else
                {
                    if (isColumnAFirstColumn)
                    {
                        result = result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, EndContextWordIndex) +
                            result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotFirstColumnContext = false;
                }
            }
            else
            {

                if (StartContextWordIndex < 0) return result;
                if (EndContextWordIndex < 0)
                {
                    if (isColumnAFirstColumn)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotFirstColumnContext = true;
                }
                else
                {
                    if (isColumnAFirstColumn)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                    result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, EndContextWordIndex) +
                                    result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotFirstColumnContext = false;
                }
            }
            return result;
        }

        //TODO Unit test this code
        private bool _isInForeachCurrentColumnIfIsLastColumnContext = false;
        private String TreatForeachCurrentColumnIfIsLastColumnContext(String CurrentColumnName, String TreatedRowStr)
        {
            int StartContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_LAST_COLUMN_START_CONTEXT.Length;
            int EndContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_LAST_COLUMN_END_CONTEXT.Length;

            bool isColumnALastColumn = IsColumnALastColumn(CurrentColumnName);
            String result = TreatedRowStr;

            int StartContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_LAST_COLUMN_START_CONTEXT);
            int EndContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_LAST_COLUMN_END_CONTEXT);

            if (_isInForeachCurrentColumnIfIsLastColumnContext)
            {
                if (EndContextWordIndex < 0)
                {
                    result = (isColumnALastColumn ? result : "");
                }
                else
                {
                    if (isColumnALastColumn)
                    {
                        result = result.Substring(0, EndContextWordIndex) +
                                result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsLastColumnContext = false;
                }
            }
            else
            {

                if (StartContextWordIndex < 0) return result;
                if (EndContextWordIndex < 0)
                {
                    if (isColumnALastColumn)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1);
                    }
                    _isInForeachCurrentColumnIfIsLastColumnContext = true;
                }
                else
                {
                    if (isColumnALastColumn)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, EndContextWordIndex) +
                                    result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsLastColumnContext = false;
                }
            }
            return result;
        }

        //TODO Unit test this code
        private bool _isInForeachCurrentColumnIfIsNotLastColumnContext = false;
        private String TreatForeachCurrentColumnIfIsNotLastColumnContext(String CurrentColumnName, String TreatedRowStr)
        {
            int StartContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_LAST_COLUMN_START_CONTEXT.Length;
            int EndContextWordLengthInt = TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_LAST_COLUMN_END_CONTEXT.Length;

            bool isColumnALastColumn = IsColumnALastColumn(CurrentColumnName);
            String result = TreatedRowStr;

            int StartContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_LAST_COLUMN_START_CONTEXT);
            int EndContextWordIndex = TreatedRowStr.IndexOf(TemplateSemanticReferenceClass.
                    TEMPLATE_FOREACH_CURRENT_COLUMN_IF_IS_NOT_LAST_COLUMN_END_CONTEXT);

            if (_isInForeachCurrentColumnIfIsNotLastColumnContext)
            {
                if (EndContextWordIndex < 0)
                {
                    result = (isColumnALastColumn ? "" : result);
                }
                else
                {
                    if (isColumnALastColumn)
                    {
                        result = result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, EndContextWordIndex) +
                            result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotLastColumnContext = false;
                }
            }
            else
            {

                if (StartContextWordIndex < 0) return result;
                if (EndContextWordIndex < 0)
                {
                    if (isColumnALastColumn)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotLastColumnContext = true;
                }
                else
                {
                    if (isColumnALastColumn)
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                    result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    else
                    {
                        result = result.Substring(0, StartContextWordIndex - 1) +
                                result.Substring(StartContextWordIndex + StartContextWordLengthInt, EndContextWordIndex) +
                                    result.Substring(EndContextWordIndex + EndContextWordLengthInt, TreatedRowStr.Length);
                    }
                    _isInForeachCurrentColumnIfIsNotLastColumnContext = false;
                }
            }
            return result;
        }

        private String ReplaceConvertedTypeStringInString(String SubmittedString, String submittedType, AbstractDatabaseDescriptor descriptor)
        {
            if (!IsWellInitialized()) return null;
            if (SubmittedString == null) return null;
            if (submittedType == null) return SubmittedString;
            if (!SubmittedString.Contains(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT)) return SubmittedString;

            while (SubmittedString.Contains(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT)
                    && SubmittedString.Contains(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT))
            {
                int WordStartIndex = SubmittedString.
                    IndexOf(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT);
                int WordEndIndex = SubmittedString.IndexOf(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT);

                String ReplacedWord = SubmittedString.Substring(WordStartIndex, WordEndIndex + TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT.Length);
                String DestinationEnvironment = ReplacedWord.Substring(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_START_CONTEXT.Length);
                DestinationEnvironment = DestinationEnvironment.Substring(0, DestinationEnvironment.IndexOf(TemplateSemanticReferenceClass.TEMPLATE_FOREACH_CURRENT_COLUMN_TYPE_CONVERT_END_CONTEXT));
                String convertedType = descriptor.ConvertType(submittedType, DestinationEnvironment);
                SubmittedString = SubmittedString.Replace(ReplacedWord, convertedType);
            }
            return SubmittedString;
        }

        public static TableTemplateHandler TableDescriptionPOJOToTableTemplateHandler(TableModel tableDescriptionPOJO, AbstractDatabaseDescriptor databaseDescriptor)
        {
            if (tableDescriptionPOJO == null) return null;
            List<ColumnModel> columnPOJOList = tableDescriptionPOJO.Columns;
            List<String> ColumnNameList = new List<String>();
            Dictionary<String, Properties> ColumnNameIndexedColumnPropertiesMap = new Dictionary<String, Properties>();
            if (!(columnPOJOList == null))
            {
                int currentIndex;
                ColumnModel currentColumn;
                for (currentIndex = 0; currentIndex < columnPOJOList.Count; currentIndex++)
                {
                    currentColumn = columnPOJOList[currentIndex];
                    ColumnNameList.Add(currentColumn.Name);
                    Properties currentProperties = new Properties();
                    currentProperties.setProperty(COLUMN_PROPERTY_TYPE_KEY, currentColumn.Type);
                    currentProperties.setProperty(COLUMN_PROPERTY_IS_PRIMARY_KEY_KEY, currentColumn.IsPrimaryKey.ToString());
                    currentProperties.setProperty(COLUMN_PROPERTY_IS_AUTOGENERATED_KEY, currentColumn.IsAutoGeneratedValue  .ToString());
                    currentProperties.setProperty(COLUMN_PROPERTY_IS_NOT_NULL_VALUE, currentColumn.IsNotNull.ToString());
                    currentProperties.setProperty(COLUMN_PROPERTY_IS_FIRST_COLUMN, (currentIndex == 0).ToString());
                    currentProperties.setProperty(COLUMN_PROPERTY_IS_LAST_COLUMN, (currentIndex == (columnPOJOList.Count - 1)).ToString());
                    ColumnNameIndexedColumnPropertiesMap.Add(currentColumn.Name, currentProperties);
                }
            }

            TableTemplateHandler templateHandler =
                    new TableTemplateHandler(tableDescriptionPOJO.Name,
                            ColumnNameList, ColumnNameIndexedColumnPropertiesMap, databaseDescriptor);
            return templateHandler;
        }

        //Column properties retrieval
        private bool IsColumnAPrimaryKeyColumn(String ColumnName)
        {
            bool result = false;
            if (ColumnName == null) return result;
            if (!_columnNameIndexedColumnPropertiesMap.ContainsKey(ColumnName)) return result;
            Properties currentColumnProperties = _columnNameIndexedColumnPropertiesMap[ColumnName];
            if (!currentColumnProperties.ContainsKey(COLUMN_PROPERTY_IS_PRIMARY_KEY_KEY)) return result;
            String currentColumnIsPrimaryStr = currentColumnProperties.getProperty(COLUMN_PROPERTY_IS_PRIMARY_KEY_KEY);
            try
            {
                result = bool.Parse(currentColumnIsPrimaryStr);
            }
            catch (Exception e)
            {
                result = false;
            }
            return result;
        }

        private bool IsColumnAAutogeneratedValueColumn(String ColumnName)
        {
            bool result = false;
            if (ColumnName == null) return result;
            if (!_columnNameIndexedColumnPropertiesMap.ContainsKey(ColumnName)) return result;
            Properties currentColumnProperties = _columnNameIndexedColumnPropertiesMap[ColumnName];
            if (!currentColumnProperties.ContainsKey(COLUMN_PROPERTY_IS_AUTOGENERATED_KEY)) return result;
            String currentColumnIsPrimaryStr = currentColumnProperties.getProperty(COLUMN_PROPERTY_IS_AUTOGENERATED_KEY);
            try
            {
                result = bool.Parse(currentColumnIsPrimaryStr);
            }
            catch (Exception e)
            {
                result = false;
            }
            return result;
        }

        private bool IsColumnANotNullValueColumn(String ColumnName)
        {
            bool result = false;
            if (ColumnName == null) return result;
            if (!_columnNameIndexedColumnPropertiesMap.ContainsKey(ColumnName)) return result;
            Properties currentColumnProperties = _columnNameIndexedColumnPropertiesMap[ColumnName];
            if (!currentColumnProperties.ContainsKey(COLUMN_PROPERTY_IS_NOT_NULL_VALUE)) return result;
            String currentColumnIsNotNullStr = currentColumnProperties.getProperty(COLUMN_PROPERTY_IS_NOT_NULL_VALUE);
            try
            {
                result = bool.Parse(currentColumnIsNotNullStr);
            }
            catch (Exception e)
            {
                result = false;
            }
            return result;
        }

        private bool IsColumnAFirstColumn(String ColumnName)
        {
            bool result = false;
            if (ColumnName == null) return result;
            if (!_columnNameIndexedColumnPropertiesMap.ContainsKey(ColumnName)) return result;
            Properties currentColumnProperties = _columnNameIndexedColumnPropertiesMap[ColumnName];
            if (!currentColumnProperties.ContainsKey(COLUMN_PROPERTY_IS_FIRST_COLUMN)) return result;
            String currentColumnIsFirstStr = currentColumnProperties.getProperty(COLUMN_PROPERTY_IS_FIRST_COLUMN);
            try
            {
                result = bool.Parse(currentColumnIsFirstStr);
            }
            catch (Exception e)
            {
                result = false;
            }
            return result;
        }

        private bool IsColumnALastColumn(String ColumnName)
        {
            bool result = false;
            if (ColumnName == null) return result;
            if (!_columnNameIndexedColumnPropertiesMap.ContainsKey(ColumnName)) return result;
            Properties currentColumnProperties = _columnNameIndexedColumnPropertiesMap[ColumnName];
            if (!currentColumnProperties.ContainsKey(COLUMN_PROPERTY_IS_LAST_COLUMN)) return result;
            String currentColumnIsLastStr = currentColumnProperties.getProperty(COLUMN_PROPERTY_IS_LAST_COLUMN);
            try
            {
                result = bool.Parse(currentColumnIsLastStr);
            }
            catch (Exception e)
            {
                result = false;
            }
            return result;
        }



    }
}
