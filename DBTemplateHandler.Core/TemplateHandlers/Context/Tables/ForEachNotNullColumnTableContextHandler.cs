using DBTemplateHandler.Core.Database;
using DBTemplateHandler.Core.TemplateHandlers.Handlers;
using System;
using System.Linq;
using System.Text;

namespace DBTemplateHandler.Core.TemplateHandlers.Context.Tables
{
    public class ForEachNotNullColumnTableContextHandler : AbstractLoopColumnTableTemplateContextHandler
    {
        public ForEachNotNullColumnTableContextHandler(ITemplateHandler templateHandlerNew) : base(templateHandlerNew) { }

        public override string StartContext { get => "{:TDB:TABLE:COLUMN:NOT:NULL:FOREACH["; }
        public override string EndContext { get => "]::}"; }
        public override bool isStartContextAndEndContextAnEntireWord => false;

        public override string ContextActionDescription => "Is replaced by the intern context as many time as there is not nullable value column in the table";
        
        public override string ProcessContext(string StringContext, IDatabaseContext databaseContext)
        {
            ControlContext(StringContext, databaseContext);
            ITableModel table = databaseContext.Table;
            string TrimedStringContext = TrimContextFromContextWrapper(StringContext);
            var columns = table.Columns;
            if (columns == null)
                throw new ArgumentException($"{table.Columns} are not set for {nameof(table)}");
            var notAutoGeneratedColumn = columns.Where(currentColumn => currentColumn.IsNotNull).ToList();
            var result = string.Join(string.Empty, notAutoGeneratedColumn.Select(currentColumn =>
                TemplateHandler.HandleTemplate(TrimedStringContext, DatabaseContextCopier.CopyWithOverride(databaseContext, currentColumn))));
            return result;
        }
    }
}
