using DBTemplateHandler.Core.Database;
using DBTemplateHandler.Core.TemplateHandlers.Columns;
using System;
using System.Collections.Generic;
using System.Text;

namespace DBTemplateHandler.Core.TemplateHandlers.Context.Columns
{
    public class AutoColumnIndexColumnContextHandler : AbstractColumnTemplateContextHandler
    {
        private const string START_CONTEXT_WORD = "{:TDB:TABLE:COLUMN:AUTO:FOREACH:CURRENT:INDEX";
        private const string END_CONTEXT_WORD = "::}";

        public readonly static string TEMPLATE_TABLE_WORD = START_CONTEXT_WORD + END_CONTEXT_WORD;

        public override string StartContext{ get => START_CONTEXT_WORD; }
        public override string EndContext { get => END_CONTEXT_WORD;}

        private const int ZeroIndex = 0;
        private static readonly string ZeroIndexAsString = $"{ZeroIndex}";
        public override string processContext(string StringContext)
        {
            if (StringContext == null)
                throw new Exception($"The provided {nameof(StringContext)} is null");
            ColumnModel columnModel = ColumnModel;
            if (columnModel == null)
                throw new Exception($"The {nameof(ColumnModel)} is not set");

            string TrimedStringContext = TrimContextFromContextWrapper(StringContext);
            if (!TrimedStringContext.Equals(""))
                throw new Exception($"There is a problem with the provided {nameof(StringContext)} :'{StringContext}' to the suited word '" + (START_CONTEXT_WORD + END_CONTEXT_WORD) + "'");
            if (columnModel.ParentTable == null)
                return ZeroIndexAsString    ;
            int currentIndex = 0;
            int currentAutoIndex = 0;
            List<ColumnModel> columnList =
                    columnModel.ParentTable.Columns;
            for (currentIndex = 0; currentIndex < columnList.Count; currentIndex++)
            {
                ColumnModel currentColumn = columnList[currentIndex];
                if (currentColumn.IsAutoGeneratedValue)
                {
                    if (currentColumn.Equals(columnModel))
                    {
                        return Convert.ToString(currentAutoIndex);
                    }
                    currentAutoIndex++;
                }
            }
            return ZeroIndexAsString;
        }

        public override bool isStartContextAndEndContextAnEntireWord()
        {
            return true;
        }

    }
}
